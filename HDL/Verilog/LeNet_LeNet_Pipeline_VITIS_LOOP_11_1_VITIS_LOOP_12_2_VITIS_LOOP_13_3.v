// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LeNet_LeNet_Pipeline_VITIS_LOOP_11_1_VITIS_LOOP_12_2_VITIS_LOOP_13_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kernel_weight_layer1_V_address0,
        kernel_weight_layer1_V_ce0,
        kernel_weight_layer1_V_we0,
        kernel_weight_layer1_V_d0,
        param_arr_address0,
        param_arr_ce0,
        param_arr_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] kernel_weight_layer1_V_address0;
output   kernel_weight_layer1_V_ce0;
output   kernel_weight_layer1_V_we0;
output  [15:0] kernel_weight_layer1_V_d0;
output  [11:0] param_arr_address0;
output   param_arr_ce0;
input  [15:0] param_arr_q0;

reg ap_idle;
reg kernel_weight_layer1_V_ce0;
reg kernel_weight_layer1_V_we0;
reg param_arr_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln11_fu_168_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln12_fu_201_p2;
reg   [0:0] icmp_ln12_reg_517;
wire   [0:0] and_ln11_fu_235_p2;
reg   [0:0] and_ln11_reg_523;
wire   [1:0] select_ln12_fu_261_p3;
reg   [1:0] select_ln12_reg_528;
wire   [63:0] index_2_cast_fu_285_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln14_7_fu_443_p1;
reg   [6:0] index_2_fu_66;
wire   [6:0] add_ln14_fu_290_p2;
wire    ap_loop_init;
reg   [1:0] k_1_fu_70;
wire   [1:0] add_ln13_fu_296_p2;
reg   [2:0] c_fu_74;
wire   [2:0] select_ln12_2_fu_382_p3;
reg   [6:0] index_1_fu_78;
wire   [6:0] select_ln12_3_fu_277_p3;
reg   [4:0] indvar_flatten_fu_82;
wire   [4:0] select_ln12_5_fu_308_p3;
reg   [2:0] r_fu_86;
wire   [2:0] select_ln11_3_fu_365_p3;
reg   [6:0] indvars_iv570_fu_90;
wire   [6:0] select_ln11_4_fu_241_p3;
reg   [6:0] indvar_flatten15_fu_94;
wire   [6:0] add_ln11_2_fu_174_p2;
wire   [6:0] add_ln11_1_fu_195_p2;
wire   [0:0] icmp_ln13_fu_229_p2;
wire   [0:0] xor_ln11_fu_223_p2;
wire   [6:0] select_ln11_fu_207_p3;
wire   [0:0] or_ln12_fu_255_p2;
wire   [6:0] add_ln12_1_fu_249_p2;
wire   [6:0] select_ln11_2_fu_215_p3;
wire   [6:0] select_ln12_1_fu_269_p3;
wire   [4:0] add_ln12_4_fu_302_p2;
wire   [2:0] add_ln11_fu_352_p2;
wire   [2:0] select_ln11_1_fu_358_p3;
wire   [2:0] add_ln12_fu_376_p2;
wire   [3:0] tmp_1_fu_396_p3;
wire   [4:0] zext_ln14_5_fu_403_p1;
wire   [4:0] zext_ln14_fu_393_p1;
wire   [4:0] add_ln14_2_fu_407_p2;
wire   [4:0] zext_ln12_fu_372_p1;
wire   [4:0] add_ln14_3_fu_413_p2;
wire   [6:0] p_shl1_cast_fu_423_p3;
wire   [6:0] zext_ln14_6_fu_419_p1;
wire   [6:0] add_ln14_4_fu_431_p2;
wire   [6:0] select_ln12_2_cast_fu_389_p1;
wire   [6:0] add_ln14_5_fu_437_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

LeNet_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            c_fu_74 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            c_fu_74 <= select_ln12_2_fu_382_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            index_1_fu_78 <= 7'd0;
        end else if (((icmp_ln11_fu_168_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            index_1_fu_78 <= select_ln12_3_fu_277_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            index_2_fu_66 <= 7'd0;
        end else if (((icmp_ln11_fu_168_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            index_2_fu_66 <= add_ln14_fu_290_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten15_fu_94 <= 7'd0;
        end else if (((icmp_ln11_fu_168_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten15_fu_94 <= add_ln11_2_fu_174_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 5'd0;
        end else if (((icmp_ln11_fu_168_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_82 <= select_ln12_5_fu_308_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvars_iv570_fu_90 <= 7'd0;
        end else if (((icmp_ln11_fu_168_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvars_iv570_fu_90 <= select_ln11_4_fu_241_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_1_fu_70 <= 2'd0;
        end else if (((icmp_ln11_fu_168_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k_1_fu_70 <= add_ln13_fu_296_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            r_fu_86 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            r_fu_86 <= select_ln11_3_fu_365_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_168_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln11_reg_523 <= and_ln11_fu_235_p2;
        icmp_ln12_reg_517 <= icmp_ln12_fu_201_p2;
        select_ln12_reg_528 <= select_ln12_fu_261_p3;
    end
end

always @ (*) begin
    if (((icmp_ln11_fu_168_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        kernel_weight_layer1_V_ce0 = 1'b1;
    end else begin
        kernel_weight_layer1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        kernel_weight_layer1_V_we0 = 1'b1;
    end else begin
        kernel_weight_layer1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        param_arr_ce0 = 1'b1;
    end else begin
        param_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_195_p2 = (indvars_iv570_fu_90 + 7'd15);

assign add_ln11_2_fu_174_p2 = (indvar_flatten15_fu_94 + 7'd1);

assign add_ln11_fu_352_p2 = (r_fu_86 + 3'd1);

assign add_ln12_1_fu_249_p2 = (select_ln11_fu_207_p3 + 7'd3);

assign add_ln12_4_fu_302_p2 = (indvar_flatten_fu_82 + 5'd1);

assign add_ln12_fu_376_p2 = (select_ln11_1_fu_358_p3 + 3'd1);

assign add_ln13_fu_296_p2 = (select_ln12_fu_261_p3 + 2'd1);

assign add_ln14_2_fu_407_p2 = (zext_ln14_5_fu_403_p1 + zext_ln14_fu_393_p1);

assign add_ln14_3_fu_413_p2 = (add_ln14_2_fu_407_p2 + zext_ln12_fu_372_p1);

assign add_ln14_4_fu_431_p2 = (p_shl1_cast_fu_423_p3 + zext_ln14_6_fu_419_p1);

assign add_ln14_5_fu_437_p2 = (add_ln14_4_fu_431_p2 + select_ln12_2_cast_fu_389_p1);

assign add_ln14_fu_290_p2 = (select_ln12_1_fu_269_p3 + 7'd1);

assign and_ln11_fu_235_p2 = (xor_ln11_fu_223_p2 & icmp_ln13_fu_229_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln11_fu_168_p2 = ((indvar_flatten15_fu_94 == 7'd75) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_201_p2 = ((indvar_flatten_fu_82 == 5'd15) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_229_p2 = ((k_1_fu_70 == 2'd3) ? 1'b1 : 1'b0);

assign index_2_cast_fu_285_p1 = select_ln12_1_fu_269_p3;

assign kernel_weight_layer1_V_address0 = zext_ln14_7_fu_443_p1;

assign kernel_weight_layer1_V_d0 = param_arr_q0;

assign or_ln12_fu_255_p2 = (icmp_ln12_fu_201_p2 | and_ln11_fu_235_p2);

assign p_shl1_cast_fu_423_p3 = {{add_ln14_3_fu_413_p2}, {2'd0}};

assign param_arr_address0 = index_2_cast_fu_285_p1;

assign select_ln11_1_fu_358_p3 = ((icmp_ln12_reg_517[0:0] == 1'b1) ? 3'd0 : c_fu_74);

assign select_ln11_2_fu_215_p3 = ((icmp_ln12_fu_201_p2[0:0] == 1'b1) ? add_ln11_1_fu_195_p2 : index_2_fu_66);

assign select_ln11_3_fu_365_p3 = ((icmp_ln12_reg_517[0:0] == 1'b1) ? add_ln11_fu_352_p2 : r_fu_86);

assign select_ln11_4_fu_241_p3 = ((icmp_ln12_fu_201_p2[0:0] == 1'b1) ? add_ln11_1_fu_195_p2 : indvars_iv570_fu_90);

assign select_ln11_fu_207_p3 = ((icmp_ln12_fu_201_p2[0:0] == 1'b1) ? add_ln11_1_fu_195_p2 : index_1_fu_78);

assign select_ln12_1_fu_269_p3 = ((and_ln11_fu_235_p2[0:0] == 1'b1) ? add_ln12_1_fu_249_p2 : select_ln11_2_fu_215_p3);

assign select_ln12_2_cast_fu_389_p1 = select_ln12_2_fu_382_p3;

assign select_ln12_2_fu_382_p3 = ((and_ln11_reg_523[0:0] == 1'b1) ? add_ln12_fu_376_p2 : select_ln11_1_fu_358_p3);

assign select_ln12_3_fu_277_p3 = ((and_ln11_fu_235_p2[0:0] == 1'b1) ? add_ln12_1_fu_249_p2 : select_ln11_fu_207_p3);

assign select_ln12_5_fu_308_p3 = ((icmp_ln12_fu_201_p2[0:0] == 1'b1) ? 5'd1 : add_ln12_4_fu_302_p2);

assign select_ln12_fu_261_p3 = ((or_ln12_fu_255_p2[0:0] == 1'b1) ? 2'd0 : k_1_fu_70);

assign tmp_1_fu_396_p3 = {{select_ln12_reg_528}, {2'd0}};

assign xor_ln11_fu_223_p2 = (icmp_ln12_fu_201_p2 ^ 1'd1);

assign zext_ln12_fu_372_p1 = select_ln11_3_fu_365_p3;

assign zext_ln14_5_fu_403_p1 = tmp_1_fu_396_p3;

assign zext_ln14_6_fu_419_p1 = add_ln14_3_fu_413_p2;

assign zext_ln14_7_fu_443_p1 = add_ln14_5_fu_437_p2;

assign zext_ln14_fu_393_p1 = select_ln12_reg_528;

endmodule //LeNet_LeNet_Pipeline_VITIS_LOOP_11_1_VITIS_LOOP_12_2_VITIS_LOOP_13_3
