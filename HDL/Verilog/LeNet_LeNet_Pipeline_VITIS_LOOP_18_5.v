// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LeNet_LeNet_Pipeline_VITIS_LOOP_18_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer5_output_V_address0,
        layer5_output_V_ce0,
        layer5_output_V_we0,
        layer5_output_V_d0,
        layer5_output_V_q0,
        layer5_output_V_address1,
        layer5_output_V_ce1,
        layer5_output_V_we1,
        layer5_output_V_d1,
        layer5_output_V_q1,
        layer4_flatten_V_address0,
        layer4_flatten_V_ce0,
        layer4_flatten_V_q0,
        dense_param_weight_arr_V_address0,
        dense_param_weight_arr_V_ce0,
        dense_param_weight_arr_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 10'd1;
parameter    ap_ST_fsm_pp0_stage1 = 10'd2;
parameter    ap_ST_fsm_pp0_stage2 = 10'd4;
parameter    ap_ST_fsm_pp0_stage3 = 10'd8;
parameter    ap_ST_fsm_pp0_stage4 = 10'd16;
parameter    ap_ST_fsm_pp0_stage5 = 10'd32;
parameter    ap_ST_fsm_pp0_stage6 = 10'd64;
parameter    ap_ST_fsm_pp0_stage7 = 10'd128;
parameter    ap_ST_fsm_pp0_stage8 = 10'd256;
parameter    ap_ST_fsm_pp0_stage9 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] layer5_output_V_address0;
output   layer5_output_V_ce0;
output   layer5_output_V_we0;
output  [15:0] layer5_output_V_d0;
input  [15:0] layer5_output_V_q0;
output  [3:0] layer5_output_V_address1;
output   layer5_output_V_ce1;
output   layer5_output_V_we1;
output  [15:0] layer5_output_V_d1;
input  [15:0] layer5_output_V_q1;
output  [7:0] layer4_flatten_V_address0;
output   layer4_flatten_V_ce0;
input  [15:0] layer4_flatten_V_q0;
output  [10:0] dense_param_weight_arr_V_address0;
output   dense_param_weight_arr_V_ce0;
input  [15:0] dense_param_weight_arr_V_q0;

reg ap_idle;
reg[3:0] layer5_output_V_address0;
reg layer5_output_V_ce0;
reg layer5_output_V_we0;
reg[15:0] layer5_output_V_d0;
reg[3:0] layer5_output_V_address1;
reg layer5_output_V_ce1;
reg layer5_output_V_we1;
reg layer4_flatten_V_ce0;
reg[10:0] dense_param_weight_arr_V_address0;
reg dense_param_weight_arr_V_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
reg   [0:0] icmp_ln18_reg_1035;
reg    ap_condition_exit_pp0_iter0_stage9;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [15:0] reg_291;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state12_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
reg   [15:0] reg_295;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
reg   [15:0] reg_300;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state13_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire    ap_block_pp0_stage9_11001;
wire   [3:0] layer5_output_V_addr_reg_1024;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln18_fu_312_p2;
wire   [10:0] empty_165_fu_349_p2;
reg   [10:0] empty_165_reg_1039;
wire  signed [31:0] conv7_i_i316_fu_371_p1;
reg  signed [31:0] conv7_i_i316_reg_1068;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state14_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [3:0] layer5_output_V_addr_5_reg_1166;
wire   [15:0] add_ln415_6_fu_803_p2;
reg   [15:0] add_ln415_6_reg_1213;
reg   [15:0] layer5_output_V_load_6_reg_1223;
wire   [15:0] add_ln415_7_fu_851_p2;
reg   [15:0] add_ln415_7_reg_1228;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage0;
wire   [63:0] r_15_cast33_fu_324_p1;
wire   [63:0] zext_ln1169_9_fu_361_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln1169_8_fu_380_p1;
wire   [63:0] zext_ln1169_7_fu_394_p1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire   [63:0] p_cast35_fu_403_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln1169_1_fu_420_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln1169_2_fu_479_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln1169_3_fu_538_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln1169_4_fu_642_p1;
wire    ap_block_pp0_stage8;
wire   [63:0] zext_ln1169_5_fu_701_p1;
wire    ap_block_pp0_stage9;
wire   [63:0] zext_ln1169_6_fu_760_p1;
reg   [7:0] r_fu_90;
wire   [7:0] add_ln18_fu_318_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_r_5;
wire   [15:0] add_ln415_12_fu_463_p2;
wire   [15:0] add_ln415_11_fu_522_p2;
wire   [15:0] add_ln415_10_fu_581_p2;
wire   [15:0] add_ln415_fu_626_p2;
wire   [15:0] add_ln415_4_fu_685_p2;
wire   [15:0] add_ln415_5_fu_744_p2;
wire   [15:0] add_ln415_8_fu_895_p2;
wire   [15:0] add_ln415_9_fu_939_p2;
wire   [8:0] p_shl1_fu_337_p3;
wire   [10:0] p_shl_fu_329_p3;
wire   [10:0] p_shl14_cast_fu_345_p1;
wire   [10:0] add_ln21_9_fu_355_p2;
wire   [10:0] add_ln21_8_fu_375_p2;
wire   [10:0] add_ln21_7_fu_389_p2;
wire   [10:0] or_ln21_fu_415_p2;
wire  signed [31:0] grp_fu_946_p2;
wire   [25:0] shl_ln737_11_fu_425_p3;
wire   [25:0] trunc_ln1245_13_fu_433_p1;
wire   [25:0] add_ln1245_11_fu_436_p2;
wire   [0:0] tmp_29_fu_452_p3;
wire   [15:0] zext_ln415_11_fu_459_p1;
wire   [15:0] trunc_ln717_11_fu_442_p4;
wire   [10:0] add_ln21_fu_474_p2;
wire  signed [31:0] grp_fu_954_p2;
wire   [25:0] shl_ln737_10_fu_484_p3;
wire   [25:0] trunc_ln1245_12_fu_492_p1;
wire   [25:0] add_ln1245_10_fu_495_p2;
wire   [0:0] tmp_28_fu_511_p3;
wire   [15:0] zext_ln415_10_fu_518_p1;
wire   [15:0] trunc_ln717_10_fu_501_p4;
wire   [10:0] add_ln21_3_fu_533_p2;
wire  signed [31:0] grp_fu_961_p2;
wire   [25:0] shl_ln737_s_fu_543_p3;
wire   [25:0] trunc_ln1245_11_fu_551_p1;
wire   [25:0] add_ln1245_9_fu_554_p2;
wire   [0:0] tmp_27_fu_570_p3;
wire   [15:0] zext_ln415_9_fu_577_p1;
wire   [15:0] trunc_ln717_4_fu_560_p4;
wire  signed [31:0] grp_fu_968_p2;
wire   [25:0] shl_ln737_3_fu_588_p3;
wire   [25:0] trunc_ln1245_fu_596_p1;
wire   [25:0] add_ln1245_fu_599_p2;
wire   [0:0] tmp_fu_615_p3;
wire   [15:0] zext_ln415_fu_622_p1;
wire   [15:0] trunc_ln717_5_fu_605_p4;
wire   [10:0] add_ln21_4_fu_637_p2;
wire  signed [31:0] grp_fu_975_p2;
wire   [25:0] shl_ln737_4_fu_647_p3;
wire   [25:0] trunc_ln1245_5_fu_655_p1;
wire   [25:0] add_ln1245_3_fu_658_p2;
wire   [0:0] tmp_21_fu_674_p3;
wire   [15:0] zext_ln415_3_fu_681_p1;
wire   [15:0] trunc_ln717_6_fu_664_p4;
wire   [10:0] add_ln21_5_fu_696_p2;
wire  signed [31:0] grp_fu_982_p2;
wire   [25:0] shl_ln737_5_fu_706_p3;
wire   [25:0] trunc_ln1245_6_fu_714_p1;
wire   [25:0] add_ln1245_4_fu_717_p2;
wire   [0:0] tmp_22_fu_733_p3;
wire   [15:0] zext_ln415_4_fu_740_p1;
wire   [15:0] trunc_ln717_7_fu_723_p4;
wire   [10:0] add_ln21_6_fu_755_p2;
wire  signed [31:0] grp_fu_989_p2;
wire   [25:0] shl_ln737_6_fu_765_p3;
wire   [25:0] trunc_ln1245_7_fu_773_p1;
wire   [25:0] add_ln1245_5_fu_776_p2;
wire   [0:0] tmp_23_fu_792_p3;
wire   [15:0] zext_ln415_5_fu_799_p1;
wire   [15:0] trunc_ln717_8_fu_782_p4;
wire  signed [31:0] grp_fu_996_p2;
wire   [25:0] shl_ln737_7_fu_813_p3;
wire   [25:0] trunc_ln1245_8_fu_821_p1;
wire   [25:0] add_ln1245_6_fu_824_p2;
wire   [0:0] tmp_24_fu_840_p3;
wire   [15:0] zext_ln415_6_fu_847_p1;
wire   [15:0] trunc_ln717_9_fu_830_p4;
wire  signed [31:0] grp_fu_1003_p2;
wire   [25:0] shl_ln737_8_fu_857_p3;
wire   [25:0] trunc_ln1245_9_fu_865_p1;
wire   [25:0] add_ln1245_7_fu_868_p2;
wire   [0:0] tmp_25_fu_884_p3;
wire   [15:0] zext_ln415_7_fu_891_p1;
wire   [15:0] trunc_ln717_s_fu_874_p4;
wire  signed [31:0] grp_fu_1010_p2;
wire   [25:0] shl_ln737_9_fu_902_p3;
wire   [25:0] trunc_ln1245_10_fu_909_p1;
wire   [25:0] add_ln1245_8_fu_912_p2;
wire   [0:0] tmp_26_fu_928_p3;
wire   [15:0] zext_ln415_8_fu_935_p1;
wire   [15:0] trunc_ln717_3_fu_918_p4;
wire  signed [15:0] grp_fu_954_p1;
wire  signed [15:0] grp_fu_961_p1;
wire  signed [15:0] grp_fu_968_p1;
wire  signed [15:0] grp_fu_975_p1;
wire  signed [15:0] grp_fu_982_p1;
wire  signed [15:0] grp_fu_989_p1;
wire  signed [15:0] grp_fu_996_p1;
wire  signed [15:0] grp_fu_1003_p1;
wire  signed [15:0] grp_fu_1010_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [9:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

LeNet_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_param_weight_arr_V_q0),
    .din1(layer4_flatten_V_q0),
    .ce(1'b1),
    .dout(grp_fu_946_p2)
);

LeNet_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_param_weight_arr_V_q0),
    .din1(grp_fu_954_p1),
    .ce(1'b1),
    .dout(grp_fu_954_p2)
);

LeNet_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_param_weight_arr_V_q0),
    .din1(grp_fu_961_p1),
    .ce(1'b1),
    .dout(grp_fu_961_p2)
);

LeNet_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_param_weight_arr_V_q0),
    .din1(grp_fu_968_p1),
    .ce(1'b1),
    .dout(grp_fu_968_p2)
);

LeNet_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_param_weight_arr_V_q0),
    .din1(grp_fu_975_p1),
    .ce(1'b1),
    .dout(grp_fu_975_p2)
);

LeNet_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_param_weight_arr_V_q0),
    .din1(grp_fu_982_p1),
    .ce(1'b1),
    .dout(grp_fu_982_p2)
);

LeNet_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_param_weight_arr_V_q0),
    .din1(grp_fu_989_p1),
    .ce(1'b1),
    .dout(grp_fu_989_p2)
);

LeNet_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_param_weight_arr_V_q0),
    .din1(grp_fu_996_p1),
    .ce(1'b1),
    .dout(grp_fu_996_p2)
);

LeNet_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_param_weight_arr_V_q0),
    .din1(grp_fu_1003_p1),
    .ce(1'b1),
    .dout(grp_fu_1003_p2)
);

LeNet_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_param_weight_arr_V_q0),
    .din1(grp_fu_1010_p1),
    .ce(1'b1),
    .dout(grp_fu_1010_p2)
);

LeNet_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage9),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage9) | ((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln18_fu_312_p2 == 1'd0))) begin
            r_fu_90 <= add_ln18_fu_318_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            r_fu_90 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        reg_295 <= layer5_output_V_q1;
    end else if (((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reg_295 <= layer5_output_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln415_6_reg_1213 <= add_ln415_6_fu_803_p2;
        icmp_ln18_reg_1035 <= icmp_ln18_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln415_7_reg_1228 <= add_ln415_7_fu_851_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv7_i_i316_reg_1068 <= conv7_i_i316_fu_371_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_fu_312_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_165_reg_1039[10 : 1] <= empty_165_fu_349_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer5_output_V_load_6_reg_1223 <= layer5_output_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_291 <= layer5_output_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_300 <= layer5_output_V_q1;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_1035 == 1'd1) & (1'b0 == ap_block_pp0_stage9_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        ap_condition_exit_pp0_iter0_stage9 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage9 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_r_5 = 8'd0;
    end else begin
        ap_sig_allocacmp_r_5 = r_fu_90;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            dense_param_weight_arr_V_address0 = zext_ln1169_6_fu_760_p1;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            dense_param_weight_arr_V_address0 = zext_ln1169_5_fu_701_p1;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            dense_param_weight_arr_V_address0 = zext_ln1169_4_fu_642_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            dense_param_weight_arr_V_address0 = zext_ln1169_3_fu_538_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            dense_param_weight_arr_V_address0 = zext_ln1169_2_fu_479_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            dense_param_weight_arr_V_address0 = zext_ln1169_1_fu_420_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            dense_param_weight_arr_V_address0 = p_cast35_fu_403_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            dense_param_weight_arr_V_address0 = zext_ln1169_7_fu_394_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            dense_param_weight_arr_V_address0 = zext_ln1169_8_fu_380_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            dense_param_weight_arr_V_address0 = zext_ln1169_9_fu_361_p1;
        end else begin
            dense_param_weight_arr_V_address0 = 'bx;
        end
    end else begin
        dense_param_weight_arr_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dense_param_weight_arr_V_ce0 = 1'b1;
    end else begin
        dense_param_weight_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer4_flatten_V_ce0 = 1'b1;
    end else begin
        layer4_flatten_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        layer5_output_V_address0 = 64'd6;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        layer5_output_V_address0 = 64'd5;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer5_output_V_address0 = 64'd3;
    end else if (((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        layer5_output_V_address0 = 64'd2;
    end else if (((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        layer5_output_V_address0 = 64'd1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        layer5_output_V_address0 = 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        layer5_output_V_address0 = 64'd7;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        layer5_output_V_address0 = 64'd8;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        layer5_output_V_address0 = layer5_output_V_addr_reg_1024;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer5_output_V_address0 = 64'd9;
    end else begin
        layer5_output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        layer5_output_V_address1 = layer5_output_V_addr_5_reg_1166;
    end else if (((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        layer5_output_V_address1 = 64'd6;
    end else if (((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        layer5_output_V_address1 = 64'd5;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        layer5_output_V_address1 = 64'd4;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        layer5_output_V_address1 = 64'd3;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        layer5_output_V_address1 = 64'd2;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        layer5_output_V_address1 = 64'd1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        layer5_output_V_address1 = 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer5_output_V_address1 = 64'd7;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer5_output_V_address1 = 64'd8;
    end else begin
        layer5_output_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        layer5_output_V_ce0 = 1'b1;
    end else begin
        layer5_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        layer5_output_V_ce1 = 1'b1;
    end else begin
        layer5_output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        layer5_output_V_d0 = add_ln415_9_fu_939_p2;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        layer5_output_V_d0 = add_ln415_8_fu_895_p2;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer5_output_V_d0 = add_ln415_6_reg_1213;
    end else if (((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        layer5_output_V_d0 = add_ln415_5_fu_744_p2;
    end else if (((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        layer5_output_V_d0 = add_ln415_4_fu_685_p2;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        layer5_output_V_d0 = add_ln415_fu_626_p2;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        layer5_output_V_d0 = add_ln415_10_fu_581_p2;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        layer5_output_V_d0 = add_ln415_11_fu_522_p2;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        layer5_output_V_d0 = add_ln415_12_fu_463_p2;
    end else begin
        layer5_output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((icmp_ln18_reg_1035 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        layer5_output_V_we0 = 1'b1;
    end else begin
        layer5_output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        layer5_output_V_we1 = 1'b1;
    end else begin
        layer5_output_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1245_10_fu_495_p2 = (shl_ln737_10_fu_484_p3 + trunc_ln1245_12_fu_492_p1);

assign add_ln1245_11_fu_436_p2 = (shl_ln737_11_fu_425_p3 + trunc_ln1245_13_fu_433_p1);

assign add_ln1245_3_fu_658_p2 = (shl_ln737_4_fu_647_p3 + trunc_ln1245_5_fu_655_p1);

assign add_ln1245_4_fu_717_p2 = (shl_ln737_5_fu_706_p3 + trunc_ln1245_6_fu_714_p1);

assign add_ln1245_5_fu_776_p2 = (shl_ln737_6_fu_765_p3 + trunc_ln1245_7_fu_773_p1);

assign add_ln1245_6_fu_824_p2 = (shl_ln737_7_fu_813_p3 + trunc_ln1245_8_fu_821_p1);

assign add_ln1245_7_fu_868_p2 = (shl_ln737_8_fu_857_p3 + trunc_ln1245_9_fu_865_p1);

assign add_ln1245_8_fu_912_p2 = (shl_ln737_9_fu_902_p3 + trunc_ln1245_10_fu_909_p1);

assign add_ln1245_9_fu_554_p2 = (shl_ln737_s_fu_543_p3 + trunc_ln1245_11_fu_551_p1);

assign add_ln1245_fu_599_p2 = (shl_ln737_3_fu_588_p3 + trunc_ln1245_fu_596_p1);

assign add_ln18_fu_318_p2 = (ap_sig_allocacmp_r_5 + 8'd1);

assign add_ln21_3_fu_533_p2 = (empty_165_reg_1039 + 11'd3);

assign add_ln21_4_fu_637_p2 = (empty_165_reg_1039 + 11'd4);

assign add_ln21_5_fu_696_p2 = (empty_165_reg_1039 + 11'd5);

assign add_ln21_6_fu_755_p2 = (empty_165_reg_1039 + 11'd6);

assign add_ln21_7_fu_389_p2 = (empty_165_reg_1039 + 11'd7);

assign add_ln21_8_fu_375_p2 = (empty_165_reg_1039 + 11'd8);

assign add_ln21_9_fu_355_p2 = (empty_165_fu_349_p2 + 11'd9);

assign add_ln21_fu_474_p2 = (empty_165_reg_1039 + 11'd2);

assign add_ln415_10_fu_581_p2 = (zext_ln415_9_fu_577_p1 + trunc_ln717_4_fu_560_p4);

assign add_ln415_11_fu_522_p2 = (zext_ln415_10_fu_518_p1 + trunc_ln717_10_fu_501_p4);

assign add_ln415_12_fu_463_p2 = (zext_ln415_11_fu_459_p1 + trunc_ln717_11_fu_442_p4);

assign add_ln415_4_fu_685_p2 = (zext_ln415_3_fu_681_p1 + trunc_ln717_6_fu_664_p4);

assign add_ln415_5_fu_744_p2 = (zext_ln415_4_fu_740_p1 + trunc_ln717_7_fu_723_p4);

assign add_ln415_6_fu_803_p2 = (zext_ln415_5_fu_799_p1 + trunc_ln717_8_fu_782_p4);

assign add_ln415_7_fu_851_p2 = (zext_ln415_6_fu_847_p1 + trunc_ln717_9_fu_830_p4);

assign add_ln415_8_fu_895_p2 = (zext_ln415_7_fu_891_p1 + trunc_ln717_s_fu_874_p4);

assign add_ln415_9_fu_939_p2 = (zext_ln415_8_fu_935_p1 + trunc_ln717_3_fu_918_p4);

assign add_ln415_fu_626_p2 = (zext_ln415_fu_622_p1 + trunc_ln717_5_fu_605_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage9;

assign conv7_i_i316_fu_371_p1 = $signed(layer4_flatten_V_q0);

assign empty_165_fu_349_p2 = (p_shl_fu_329_p3 + p_shl14_cast_fu_345_p1);

assign grp_fu_1003_p1 = conv7_i_i316_reg_1068;

assign grp_fu_1010_p1 = conv7_i_i316_reg_1068;

assign grp_fu_954_p1 = conv7_i_i316_reg_1068;

assign grp_fu_961_p1 = conv7_i_i316_reg_1068;

assign grp_fu_968_p1 = conv7_i_i316_reg_1068;

assign grp_fu_975_p1 = conv7_i_i316_reg_1068;

assign grp_fu_982_p1 = conv7_i_i316_reg_1068;

assign grp_fu_989_p1 = conv7_i_i316_reg_1068;

assign grp_fu_996_p1 = conv7_i_i316_reg_1068;

assign icmp_ln18_fu_312_p2 = ((ap_sig_allocacmp_r_5 == 8'd192) ? 1'b1 : 1'b0);

assign layer4_flatten_V_address0 = r_15_cast33_fu_324_p1;

assign layer5_output_V_addr_5_reg_1166 = 64'd4;

assign layer5_output_V_addr_reg_1024 = 64'd9;

assign layer5_output_V_d1 = add_ln415_7_reg_1228;

assign or_ln21_fu_415_p2 = (empty_165_reg_1039 | 11'd1);

assign p_cast35_fu_403_p1 = empty_165_reg_1039;

assign p_shl14_cast_fu_345_p1 = p_shl1_fu_337_p3;

assign p_shl1_fu_337_p3 = {{ap_sig_allocacmp_r_5}, {1'd0}};

assign p_shl_fu_329_p3 = {{ap_sig_allocacmp_r_5}, {3'd0}};

assign r_15_cast33_fu_324_p1 = ap_sig_allocacmp_r_5;

assign shl_ln737_10_fu_484_p3 = {{reg_291}, {10'd0}};

assign shl_ln737_11_fu_425_p3 = {{reg_295}, {10'd0}};

assign shl_ln737_3_fu_588_p3 = {{reg_295}, {10'd0}};

assign shl_ln737_4_fu_647_p3 = {{reg_291}, {10'd0}};

assign shl_ln737_5_fu_706_p3 = {{reg_300}, {10'd0}};

assign shl_ln737_6_fu_765_p3 = {{reg_295}, {10'd0}};

assign shl_ln737_7_fu_813_p3 = {{reg_291}, {10'd0}};

assign shl_ln737_8_fu_857_p3 = {{reg_300}, {10'd0}};

assign shl_ln737_9_fu_902_p3 = {{layer5_output_V_load_6_reg_1223}, {10'd0}};

assign shl_ln737_s_fu_543_p3 = {{reg_300}, {10'd0}};

assign tmp_21_fu_674_p3 = grp_fu_975_p2[32'd9];

assign tmp_22_fu_733_p3 = grp_fu_982_p2[32'd9];

assign tmp_23_fu_792_p3 = grp_fu_989_p2[32'd9];

assign tmp_24_fu_840_p3 = grp_fu_996_p2[32'd9];

assign tmp_25_fu_884_p3 = grp_fu_1003_p2[32'd9];

assign tmp_26_fu_928_p3 = grp_fu_1010_p2[32'd9];

assign tmp_27_fu_570_p3 = grp_fu_961_p2[32'd9];

assign tmp_28_fu_511_p3 = grp_fu_954_p2[32'd9];

assign tmp_29_fu_452_p3 = grp_fu_946_p2[32'd9];

assign tmp_fu_615_p3 = grp_fu_968_p2[32'd9];

assign trunc_ln1245_10_fu_909_p1 = grp_fu_1010_p2[25:0];

assign trunc_ln1245_11_fu_551_p1 = grp_fu_961_p2[25:0];

assign trunc_ln1245_12_fu_492_p1 = grp_fu_954_p2[25:0];

assign trunc_ln1245_13_fu_433_p1 = grp_fu_946_p2[25:0];

assign trunc_ln1245_5_fu_655_p1 = grp_fu_975_p2[25:0];

assign trunc_ln1245_6_fu_714_p1 = grp_fu_982_p2[25:0];

assign trunc_ln1245_7_fu_773_p1 = grp_fu_989_p2[25:0];

assign trunc_ln1245_8_fu_821_p1 = grp_fu_996_p2[25:0];

assign trunc_ln1245_9_fu_865_p1 = grp_fu_1003_p2[25:0];

assign trunc_ln1245_fu_596_p1 = grp_fu_968_p2[25:0];

assign trunc_ln717_10_fu_501_p4 = {{add_ln1245_10_fu_495_p2[25:10]}};

assign trunc_ln717_11_fu_442_p4 = {{add_ln1245_11_fu_436_p2[25:10]}};

assign trunc_ln717_3_fu_918_p4 = {{add_ln1245_8_fu_912_p2[25:10]}};

assign trunc_ln717_4_fu_560_p4 = {{add_ln1245_9_fu_554_p2[25:10]}};

assign trunc_ln717_5_fu_605_p4 = {{add_ln1245_fu_599_p2[25:10]}};

assign trunc_ln717_6_fu_664_p4 = {{add_ln1245_3_fu_658_p2[25:10]}};

assign trunc_ln717_7_fu_723_p4 = {{add_ln1245_4_fu_717_p2[25:10]}};

assign trunc_ln717_8_fu_782_p4 = {{add_ln1245_5_fu_776_p2[25:10]}};

assign trunc_ln717_9_fu_830_p4 = {{add_ln1245_6_fu_824_p2[25:10]}};

assign trunc_ln717_s_fu_874_p4 = {{add_ln1245_7_fu_868_p2[25:10]}};

assign zext_ln1169_1_fu_420_p1 = or_ln21_fu_415_p2;

assign zext_ln1169_2_fu_479_p1 = add_ln21_fu_474_p2;

assign zext_ln1169_3_fu_538_p1 = add_ln21_3_fu_533_p2;

assign zext_ln1169_4_fu_642_p1 = add_ln21_4_fu_637_p2;

assign zext_ln1169_5_fu_701_p1 = add_ln21_5_fu_696_p2;

assign zext_ln1169_6_fu_760_p1 = add_ln21_6_fu_755_p2;

assign zext_ln1169_7_fu_394_p1 = add_ln21_7_fu_389_p2;

assign zext_ln1169_8_fu_380_p1 = add_ln21_8_fu_375_p2;

assign zext_ln1169_9_fu_361_p1 = add_ln21_9_fu_355_p2;

assign zext_ln415_10_fu_518_p1 = tmp_28_fu_511_p3;

assign zext_ln415_11_fu_459_p1 = tmp_29_fu_452_p3;

assign zext_ln415_3_fu_681_p1 = tmp_21_fu_674_p3;

assign zext_ln415_4_fu_740_p1 = tmp_22_fu_733_p3;

assign zext_ln415_5_fu_799_p1 = tmp_23_fu_792_p3;

assign zext_ln415_6_fu_847_p1 = tmp_24_fu_840_p3;

assign zext_ln415_7_fu_891_p1 = tmp_25_fu_884_p3;

assign zext_ln415_8_fu_935_p1 = tmp_26_fu_928_p3;

assign zext_ln415_9_fu_577_p1 = tmp_27_fu_570_p3;

assign zext_ln415_fu_622_p1 = tmp_fu_615_p3;

always @ (posedge ap_clk) begin
    empty_165_reg_1039[0] <= 1'b0;
end

endmodule //LeNet_LeNet_Pipeline_VITIS_LOOP_18_5
