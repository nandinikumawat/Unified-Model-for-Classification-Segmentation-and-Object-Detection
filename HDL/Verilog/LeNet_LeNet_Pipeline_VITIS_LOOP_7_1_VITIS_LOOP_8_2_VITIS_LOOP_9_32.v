// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LeNet_LeNet_Pipeline_VITIS_LOOP_7_1_VITIS_LOOP_8_2_VITIS_LOOP_9_32 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer4_output_V_address0,
        layer4_output_V_ce0,
        layer4_output_V_we0,
        layer4_output_V_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] layer4_output_V_address0;
output   layer4_output_V_ce0;
output   layer4_output_V_we0;
output  [15:0] layer4_output_V_d0;

reg ap_idle;
reg layer4_output_V_ce0;
reg layer4_output_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln7_fu_120_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln10_1_fu_254_p1;
reg   [3:0] k_out_fu_58;
wire   [3:0] add_ln9_fu_259_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_k_out_load;
reg   [2:0] c_fu_62;
wire   [2:0] select_ln8_2_fu_214_p3;
reg   [2:0] ap_sig_allocacmp_c_load;
reg   [6:0] indvar_flatten565_fu_66;
wire   [6:0] select_ln8_3_fu_271_p3;
reg   [6:0] ap_sig_allocacmp_indvar_flatten565_load;
reg   [2:0] r_fu_70;
wire   [2:0] select_ln7_1_fu_164_p3;
reg   [2:0] ap_sig_allocacmp_r_load;
reg   [7:0] indvar_flatten579_fu_74;
wire   [7:0] add_ln7_fu_126_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten579_load;
wire   [0:0] icmp_ln8_fu_150_p2;
wire   [2:0] add_ln7_1_fu_144_p2;
wire   [0:0] icmp_ln9_fu_182_p2;
wire   [0:0] xor_ln7_fu_176_p2;
wire   [2:0] select_ln7_fu_156_p3;
wire   [0:0] and_ln7_fu_188_p2;
wire   [0:0] or_ln8_fu_200_p2;
wire   [2:0] add_ln8_fu_194_p2;
wire   [3:0] select_ln8_fu_206_p3;
wire   [5:0] tmp_s_fu_226_p3;
wire   [5:0] zext_ln10_fu_172_p1;
wire   [5:0] add_ln10_fu_234_p2;
wire   [7:0] tmp_62_cast_fu_240_p3;
wire   [7:0] select_ln8_11_cast_fu_222_p1;
wire   [7:0] add_ln10_1_fu_248_p2;
wire   [6:0] add_ln8_3_fu_265_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

LeNet_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln7_fu_120_p2 == 1'd0)) begin
            c_fu_62 <= select_ln8_2_fu_214_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            c_fu_62 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln7_fu_120_p2 == 1'd0)) begin
            indvar_flatten565_fu_66 <= select_ln8_3_fu_271_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten565_fu_66 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln7_fu_120_p2 == 1'd0)) begin
            indvar_flatten579_fu_74 <= add_ln7_fu_126_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten579_fu_74 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln7_fu_120_p2 == 1'd0)) begin
            k_out_fu_58 <= add_ln9_fu_259_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_out_fu_58 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln7_fu_120_p2 == 1'd0)) begin
            r_fu_70 <= select_ln7_1_fu_164_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            r_fu_70 <= 3'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_120_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_c_load = 3'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_62;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten565_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten565_load = indvar_flatten565_fu_66;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten579_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten579_load = indvar_flatten579_fu_74;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_k_out_load = 4'd0;
    end else begin
        ap_sig_allocacmp_k_out_load = k_out_fu_58;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_r_load = 3'd0;
    end else begin
        ap_sig_allocacmp_r_load = r_fu_70;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        layer4_output_V_ce0 = 1'b1;
    end else begin
        layer4_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        layer4_output_V_we0 = 1'b1;
    end else begin
        layer4_output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_1_fu_248_p2 = (tmp_62_cast_fu_240_p3 + select_ln8_11_cast_fu_222_p1);

assign add_ln10_fu_234_p2 = (tmp_s_fu_226_p3 + zext_ln10_fu_172_p1);

assign add_ln7_1_fu_144_p2 = (ap_sig_allocacmp_r_load + 3'd1);

assign add_ln7_fu_126_p2 = (ap_sig_allocacmp_indvar_flatten579_load + 8'd1);

assign add_ln8_3_fu_265_p2 = (ap_sig_allocacmp_indvar_flatten565_load + 7'd1);

assign add_ln8_fu_194_p2 = (select_ln7_fu_156_p3 + 3'd1);

assign add_ln9_fu_259_p2 = (select_ln8_fu_206_p3 + 4'd1);

assign and_ln7_fu_188_p2 = (xor_ln7_fu_176_p2 & icmp_ln9_fu_182_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln7_fu_120_p2 = ((ap_sig_allocacmp_indvar_flatten579_load == 8'd192) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_150_p2 = ((ap_sig_allocacmp_indvar_flatten565_load == 7'd48) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_182_p2 = ((ap_sig_allocacmp_k_out_load == 4'd12) ? 1'b1 : 1'b0);

assign layer4_output_V_address0 = zext_ln10_1_fu_254_p1;

assign layer4_output_V_d0 = 16'd0;

assign or_ln8_fu_200_p2 = (icmp_ln8_fu_150_p2 | and_ln7_fu_188_p2);

assign select_ln7_1_fu_164_p3 = ((icmp_ln8_fu_150_p2[0:0] == 1'b1) ? add_ln7_1_fu_144_p2 : ap_sig_allocacmp_r_load);

assign select_ln7_fu_156_p3 = ((icmp_ln8_fu_150_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_c_load);

assign select_ln8_11_cast_fu_222_p1 = select_ln8_2_fu_214_p3;

assign select_ln8_2_fu_214_p3 = ((and_ln7_fu_188_p2[0:0] == 1'b1) ? add_ln8_fu_194_p2 : select_ln7_fu_156_p3);

assign select_ln8_3_fu_271_p3 = ((icmp_ln8_fu_150_p2[0:0] == 1'b1) ? 7'd1 : add_ln8_3_fu_265_p2);

assign select_ln8_fu_206_p3 = ((or_ln8_fu_200_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_k_out_load);

assign tmp_62_cast_fu_240_p3 = {{add_ln10_fu_234_p2}, {2'd0}};

assign tmp_s_fu_226_p3 = {{select_ln8_fu_206_p3}, {2'd0}};

assign xor_ln7_fu_176_p2 = (icmp_ln8_fu_150_p2 ^ 1'd1);

assign zext_ln10_1_fu_254_p1 = add_ln10_1_fu_248_p2;

assign zext_ln10_fu_172_p1 = select_ln7_1_fu_164_p3;

endmodule //LeNet_LeNet_Pipeline_VITIS_LOOP_7_1_VITIS_LOOP_8_2_VITIS_LOOP_9_32
