// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LeNet_LeNet_Pipeline_VITIS_LOOP_8_1_VITIS_LOOP_9_2_loop_output_channel_init (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer1_output_V_address0,
        layer1_output_V_ce0,
        layer1_output_V_we0,
        layer1_output_V_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] layer1_output_V_address0;
output   layer1_output_V_ce0;
output   layer1_output_V_we0;
output  [15:0] layer1_output_V_d0;

reg ap_idle;
reg layer1_output_V_ce0;
reg layer1_output_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln8_fu_124_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln12_3_fu_306_p1;
reg   [1:0] k_fu_62;
wire   [1:0] add_ln11_fu_311_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_k_load;
reg   [4:0] kc_fu_66;
wire   [4:0] select_ln9_1_fu_218_p3;
reg   [4:0] ap_sig_allocacmp_kc_load;
reg   [6:0] indvar_flatten84_fu_70;
wire   [6:0] select_ln9_3_fu_323_p3;
reg   [6:0] ap_sig_allocacmp_indvar_flatten84_load;
reg   [4:0] kr_fu_74;
wire   [4:0] select_ln8_1_fu_168_p3;
reg   [4:0] ap_sig_allocacmp_kr_load;
reg   [10:0] indvar_flatten98_fu_78;
wire   [10:0] add_ln8_2_fu_130_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten98_load;
wire   [0:0] icmp_ln9_fu_154_p2;
wire   [4:0] add_ln8_fu_148_p2;
wire   [0:0] icmp_ln11_fu_186_p2;
wire   [0:0] xor_ln8_fu_180_p2;
wire   [4:0] select_ln8_fu_160_p3;
wire   [0:0] and_ln8_fu_192_p2;
wire   [0:0] or_ln9_fu_204_p2;
wire   [4:0] add_ln9_fu_198_p2;
wire   [1:0] select_ln9_fu_210_p3;
wire   [6:0] tmp_8_fu_230_p3;
wire   [4:0] tmp_9_fu_242_p3;
wire   [7:0] zext_ln12_fu_238_p1;
wire   [7:0] zext_ln12_2_fu_250_p1;
wire   [7:0] sub_ln12_fu_254_p2;
wire  signed [8:0] sext_ln12_fu_260_p1;
wire   [8:0] zext_ln9_fu_176_p1;
wire   [8:0] add_ln12_fu_264_p2;
wire   [5:0] trunc_ln12_fu_270_p1;
wire   [7:0] trunc_ln12_1_fu_282_p1;
wire   [10:0] p_shl4_cast_fu_274_p3;
wire   [10:0] p_shl5_cast_fu_286_p3;
wire   [10:0] sub_ln12_1_fu_294_p2;
wire   [10:0] select_ln9_1_cast_fu_226_p1;
wire   [10:0] add_ln12_2_fu_300_p2;
wire   [6:0] add_ln9_2_fu_317_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

LeNet_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln8_fu_124_p2 == 1'd0)) begin
            indvar_flatten84_fu_70 <= select_ln9_3_fu_323_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten84_fu_70 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln8_fu_124_p2 == 1'd0)) begin
            indvar_flatten98_fu_78 <= add_ln8_2_fu_130_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten98_fu_78 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln8_fu_124_p2 == 1'd0)) begin
            k_fu_62 <= add_ln11_fu_311_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_62 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln8_fu_124_p2 == 1'd0)) begin
            kc_fu_66 <= select_ln9_1_fu_218_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            kc_fu_66 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln8_fu_124_p2 == 1'd0)) begin
            kr_fu_74 <= select_ln8_1_fu_168_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            kr_fu_74 <= 5'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_124_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten84_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten84_load = indvar_flatten84_fu_70;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten98_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten98_load = indvar_flatten98_fu_78;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_k_load = 2'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_62;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_kc_load = 5'd0;
    end else begin
        ap_sig_allocacmp_kc_load = kc_fu_66;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_kr_load = 5'd0;
    end else begin
        ap_sig_allocacmp_kr_load = kr_fu_74;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer1_output_V_ce0 = 1'b1;
    end else begin
        layer1_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_124_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer1_output_V_we0 = 1'b1;
    end else begin
        layer1_output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_311_p2 = (select_ln9_fu_210_p3 + 2'd1);

assign add_ln12_2_fu_300_p2 = (sub_ln12_1_fu_294_p2 + select_ln9_1_cast_fu_226_p1);

assign add_ln12_fu_264_p2 = ($signed(sext_ln12_fu_260_p1) + $signed(zext_ln9_fu_176_p1));

assign add_ln8_2_fu_130_p2 = (ap_sig_allocacmp_indvar_flatten98_load + 11'd1);

assign add_ln8_fu_148_p2 = (ap_sig_allocacmp_kr_load + 5'd1);

assign add_ln9_2_fu_317_p2 = (ap_sig_allocacmp_indvar_flatten84_load + 7'd1);

assign add_ln9_fu_198_p2 = (select_ln8_fu_160_p3 + 5'd1);

assign and_ln8_fu_192_p2 = (xor_ln8_fu_180_p2 & icmp_ln11_fu_186_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln11_fu_186_p2 = ((ap_sig_allocacmp_k_load == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_124_p2 = ((ap_sig_allocacmp_indvar_flatten98_load == 11'd1728) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_154_p2 = ((ap_sig_allocacmp_indvar_flatten84_load == 7'd72) ? 1'b1 : 1'b0);

assign layer1_output_V_address0 = zext_ln12_3_fu_306_p1;

assign layer1_output_V_d0 = 16'd0;

assign or_ln9_fu_204_p2 = (icmp_ln9_fu_154_p2 | and_ln8_fu_192_p2);

assign p_shl4_cast_fu_274_p3 = {{trunc_ln12_fu_270_p1}, {5'd0}};

assign p_shl5_cast_fu_286_p3 = {{trunc_ln12_1_fu_282_p1}, {3'd0}};

assign select_ln8_1_fu_168_p3 = ((icmp_ln9_fu_154_p2[0:0] == 1'b1) ? add_ln8_fu_148_p2 : ap_sig_allocacmp_kr_load);

assign select_ln8_fu_160_p3 = ((icmp_ln9_fu_154_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_kc_load);

assign select_ln9_1_cast_fu_226_p1 = select_ln9_1_fu_218_p3;

assign select_ln9_1_fu_218_p3 = ((and_ln8_fu_192_p2[0:0] == 1'b1) ? add_ln9_fu_198_p2 : select_ln8_fu_160_p3);

assign select_ln9_3_fu_323_p3 = ((icmp_ln9_fu_154_p2[0:0] == 1'b1) ? 7'd1 : add_ln9_2_fu_317_p2);

assign select_ln9_fu_210_p3 = ((or_ln9_fu_204_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_k_load);

assign sext_ln12_fu_260_p1 = $signed(sub_ln12_fu_254_p2);

assign sub_ln12_1_fu_294_p2 = (p_shl4_cast_fu_274_p3 - p_shl5_cast_fu_286_p3);

assign sub_ln12_fu_254_p2 = (zext_ln12_fu_238_p1 - zext_ln12_2_fu_250_p1);

assign tmp_8_fu_230_p3 = {{select_ln9_fu_210_p3}, {5'd0}};

assign tmp_9_fu_242_p3 = {{select_ln9_fu_210_p3}, {3'd0}};

assign trunc_ln12_1_fu_282_p1 = add_ln12_fu_264_p2[7:0];

assign trunc_ln12_fu_270_p1 = add_ln12_fu_264_p2[5:0];

assign xor_ln8_fu_180_p2 = (icmp_ln9_fu_154_p2 ^ 1'd1);

assign zext_ln12_2_fu_250_p1 = tmp_9_fu_242_p3;

assign zext_ln12_3_fu_306_p1 = add_ln12_2_fu_300_p2;

assign zext_ln12_fu_238_p1 = tmp_8_fu_230_p3;

assign zext_ln9_fu_176_p1 = select_ln8_1_fu_168_p3;

endmodule //LeNet_LeNet_Pipeline_VITIS_LOOP_8_1_VITIS_LOOP_9_2_loop_output_channel_init
