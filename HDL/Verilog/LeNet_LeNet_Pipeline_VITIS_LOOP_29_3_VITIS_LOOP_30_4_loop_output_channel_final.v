// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LeNet_LeNet_Pipeline_VITIS_LOOP_29_3_VITIS_LOOP_30_4_loop_output_channel_final (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer3_output_V_address0,
        layer3_output_V_ce0,
        layer3_output_V_we0,
        layer3_output_V_d0,
        layer3_output_V_address1,
        layer3_output_V_ce1,
        layer3_output_V_q1,
        kernel_bias_layer3_V_address0,
        kernel_bias_layer3_V_ce0,
        kernel_bias_layer3_V_q0,
        grp_sigmoid_fu_354_p_din1,
        grp_sigmoid_fu_354_p_dout0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] layer3_output_V_address0;
output   layer3_output_V_ce0;
output   layer3_output_V_we0;
output  [15:0] layer3_output_V_d0;
output  [9:0] layer3_output_V_address1;
output   layer3_output_V_ce1;
input  [15:0] layer3_output_V_q1;
output  [3:0] kernel_bias_layer3_V_address0;
output   kernel_bias_layer3_V_ce0;
input  [15:0] kernel_bias_layer3_V_q0;
output  [15:0] grp_sigmoid_fu_354_p_din1;
input  [15:0] grp_sigmoid_fu_354_p_dout0;

reg ap_idle;
reg layer3_output_V_ce0;
reg layer3_output_V_we0;
reg layer3_output_V_ce1;
reg kernel_bias_layer3_V_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
wire    ap_block_state27_pp0_stage0_iter26;
wire    ap_block_state28_pp0_stage0_iter27;
wire    ap_block_state29_pp0_stage0_iter28;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln29_fu_139_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [9:0] layer3_output_V_addr_reg_373;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter1_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter2_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter3_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter4_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter5_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter6_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter7_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter8_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter9_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter10_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter11_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter12_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter13_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter14_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter15_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter16_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter17_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter18_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter19_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter20_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter21_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter22_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter23_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter24_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter25_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter26_reg;
reg   [9:0] layer3_output_V_addr_reg_373_pp0_iter27_reg;
wire   [15:0] add_ln712_1_fu_328_p2;
reg   [15:0] add_ln712_1_reg_384;
reg   [15:0] ref_tmp46_i_reg_389;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln712_1_fu_278_p1;
wire   [63:0] k_out_3_cast_fu_245_p1;
reg   [3:0] k_out_fu_56;
wire   [3:0] add_ln32_fu_283_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_k_out_load;
reg   [3:0] c_fu_60;
wire   [3:0] select_ln30_1_fu_233_p3;
reg   [3:0] ap_sig_allocacmp_c_load;
reg   [7:0] indvar_flatten543_fu_64;
wire   [7:0] select_ln30_2_fu_295_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten543_load;
reg   [3:0] r_fu_68;
wire   [3:0] select_ln29_1_fu_183_p3;
reg   [3:0] ap_sig_allocacmp_r_load;
reg   [9:0] indvar_flatten557_fu_72;
wire   [9:0] add_ln29_fu_145_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten557_load;
wire   [0:0] icmp_ln30_fu_169_p2;
wire   [3:0] add_ln29_1_fu_163_p2;
wire   [0:0] icmp_ln32_fu_201_p2;
wire   [0:0] xor_ln29_fu_195_p2;
wire   [3:0] select_ln29_fu_175_p3;
wire   [0:0] and_ln29_fu_207_p2;
wire   [0:0] or_ln30_fu_219_p2;
wire   [3:0] add_ln30_fu_213_p2;
wire   [3:0] select_ln30_fu_225_p3;
wire   [6:0] tmp_s_fu_250_p3;
wire   [6:0] zext_ln712_fu_191_p1;
wire   [6:0] add_ln712_fu_258_p2;
wire   [9:0] tmp_59_cast_fu_264_p3;
wire   [9:0] select_ln30_1_cast_fu_241_p1;
wire   [9:0] add_ln712_2_fu_272_p2;
wire   [7:0] add_ln30_1_fu_289_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_done_reg = 1'b0;
end

LeNet_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter27_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln29_fu_139_p2 == 1'd0))) begin
            c_fu_60 <= select_ln30_1_fu_233_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            c_fu_60 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln29_fu_139_p2 == 1'd0))) begin
            indvar_flatten543_fu_64 <= select_ln30_2_fu_295_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten543_fu_64 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln29_fu_139_p2 == 1'd0))) begin
            indvar_flatten557_fu_72 <= add_ln29_fu_145_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten557_fu_72 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln29_fu_139_p2 == 1'd0))) begin
            k_out_fu_56 <= add_ln32_fu_283_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_out_fu_56 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln29_fu_139_p2 == 1'd0))) begin
            r_fu_68 <= select_ln29_1_fu_183_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            r_fu_68 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln712_1_reg_384 <= add_ln712_1_fu_328_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        layer3_output_V_addr_reg_373_pp0_iter1_reg <= layer3_output_V_addr_reg_373;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        layer3_output_V_addr_reg_373_pp0_iter10_reg <= layer3_output_V_addr_reg_373_pp0_iter9_reg;
        layer3_output_V_addr_reg_373_pp0_iter11_reg <= layer3_output_V_addr_reg_373_pp0_iter10_reg;
        layer3_output_V_addr_reg_373_pp0_iter12_reg <= layer3_output_V_addr_reg_373_pp0_iter11_reg;
        layer3_output_V_addr_reg_373_pp0_iter13_reg <= layer3_output_V_addr_reg_373_pp0_iter12_reg;
        layer3_output_V_addr_reg_373_pp0_iter14_reg <= layer3_output_V_addr_reg_373_pp0_iter13_reg;
        layer3_output_V_addr_reg_373_pp0_iter15_reg <= layer3_output_V_addr_reg_373_pp0_iter14_reg;
        layer3_output_V_addr_reg_373_pp0_iter16_reg <= layer3_output_V_addr_reg_373_pp0_iter15_reg;
        layer3_output_V_addr_reg_373_pp0_iter17_reg <= layer3_output_V_addr_reg_373_pp0_iter16_reg;
        layer3_output_V_addr_reg_373_pp0_iter18_reg <= layer3_output_V_addr_reg_373_pp0_iter17_reg;
        layer3_output_V_addr_reg_373_pp0_iter19_reg <= layer3_output_V_addr_reg_373_pp0_iter18_reg;
        layer3_output_V_addr_reg_373_pp0_iter20_reg <= layer3_output_V_addr_reg_373_pp0_iter19_reg;
        layer3_output_V_addr_reg_373_pp0_iter21_reg <= layer3_output_V_addr_reg_373_pp0_iter20_reg;
        layer3_output_V_addr_reg_373_pp0_iter22_reg <= layer3_output_V_addr_reg_373_pp0_iter21_reg;
        layer3_output_V_addr_reg_373_pp0_iter23_reg <= layer3_output_V_addr_reg_373_pp0_iter22_reg;
        layer3_output_V_addr_reg_373_pp0_iter24_reg <= layer3_output_V_addr_reg_373_pp0_iter23_reg;
        layer3_output_V_addr_reg_373_pp0_iter25_reg <= layer3_output_V_addr_reg_373_pp0_iter24_reg;
        layer3_output_V_addr_reg_373_pp0_iter26_reg <= layer3_output_V_addr_reg_373_pp0_iter25_reg;
        layer3_output_V_addr_reg_373_pp0_iter27_reg <= layer3_output_V_addr_reg_373_pp0_iter26_reg;
        layer3_output_V_addr_reg_373_pp0_iter2_reg <= layer3_output_V_addr_reg_373_pp0_iter1_reg;
        layer3_output_V_addr_reg_373_pp0_iter3_reg <= layer3_output_V_addr_reg_373_pp0_iter2_reg;
        layer3_output_V_addr_reg_373_pp0_iter4_reg <= layer3_output_V_addr_reg_373_pp0_iter3_reg;
        layer3_output_V_addr_reg_373_pp0_iter5_reg <= layer3_output_V_addr_reg_373_pp0_iter4_reg;
        layer3_output_V_addr_reg_373_pp0_iter6_reg <= layer3_output_V_addr_reg_373_pp0_iter5_reg;
        layer3_output_V_addr_reg_373_pp0_iter7_reg <= layer3_output_V_addr_reg_373_pp0_iter6_reg;
        layer3_output_V_addr_reg_373_pp0_iter8_reg <= layer3_output_V_addr_reg_373_pp0_iter7_reg;
        layer3_output_V_addr_reg_373_pp0_iter9_reg <= layer3_output_V_addr_reg_373_pp0_iter8_reg;
        ref_tmp46_i_reg_389 <= grp_sigmoid_fu_354_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln29_fu_139_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer3_output_V_addr_reg_373 <= zext_ln712_1_fu_278_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln29_fu_139_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter27_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_c_load = 4'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_60;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten543_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten543_load = indvar_flatten543_fu_64;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten557_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten557_load = indvar_flatten557_fu_72;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_k_out_load = 4'd0;
    end else begin
        ap_sig_allocacmp_k_out_load = k_out_fu_56;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_r_load = 4'd0;
    end else begin
        ap_sig_allocacmp_r_load = r_fu_68;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_bias_layer3_V_ce0 = 1'b1;
    end else begin
        kernel_bias_layer3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter28 == 1'b1))) begin
        layer3_output_V_ce0 = 1'b1;
    end else begin
        layer3_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer3_output_V_ce1 = 1'b1;
    end else begin
        layer3_output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter28 == 1'b1))) begin
        layer3_output_V_we0 = 1'b1;
    end else begin
        layer3_output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_1_fu_163_p2 = (ap_sig_allocacmp_r_load + 4'd1);

assign add_ln29_fu_145_p2 = (ap_sig_allocacmp_indvar_flatten557_load + 10'd1);

assign add_ln30_1_fu_289_p2 = (ap_sig_allocacmp_indvar_flatten543_load + 8'd1);

assign add_ln30_fu_213_p2 = (select_ln29_fu_175_p3 + 4'd1);

assign add_ln32_fu_283_p2 = (select_ln30_fu_225_p3 + 4'd1);

assign add_ln712_1_fu_328_p2 = (kernel_bias_layer3_V_q0 + layer3_output_V_q1);

assign add_ln712_2_fu_272_p2 = (tmp_59_cast_fu_264_p3 + select_ln30_1_cast_fu_241_p1);

assign add_ln712_fu_258_p2 = (tmp_s_fu_250_p3 + zext_ln712_fu_191_p1);

assign and_ln29_fu_207_p2 = (xor_ln29_fu_195_p2 & icmp_ln32_fu_201_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_sigmoid_fu_354_p_din1 = add_ln712_1_reg_384;

assign icmp_ln29_fu_139_p2 = ((ap_sig_allocacmp_indvar_flatten557_load == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_169_p2 = ((ap_sig_allocacmp_indvar_flatten543_load == 8'd96) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_201_p2 = ((ap_sig_allocacmp_k_out_load == 4'd12) ? 1'b1 : 1'b0);

assign k_out_3_cast_fu_245_p1 = select_ln30_fu_225_p3;

assign kernel_bias_layer3_V_address0 = k_out_3_cast_fu_245_p1;

assign layer3_output_V_address0 = layer3_output_V_addr_reg_373_pp0_iter27_reg;

assign layer3_output_V_address1 = zext_ln712_1_fu_278_p1;

assign layer3_output_V_d0 = ref_tmp46_i_reg_389;

assign or_ln30_fu_219_p2 = (icmp_ln30_fu_169_p2 | and_ln29_fu_207_p2);

assign select_ln29_1_fu_183_p3 = ((icmp_ln30_fu_169_p2[0:0] == 1'b1) ? add_ln29_1_fu_163_p2 : ap_sig_allocacmp_r_load);

assign select_ln29_fu_175_p3 = ((icmp_ln30_fu_169_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_c_load);

assign select_ln30_1_cast_fu_241_p1 = select_ln30_1_fu_233_p3;

assign select_ln30_1_fu_233_p3 = ((and_ln29_fu_207_p2[0:0] == 1'b1) ? add_ln30_fu_213_p2 : select_ln29_fu_175_p3);

assign select_ln30_2_fu_295_p3 = ((icmp_ln30_fu_169_p2[0:0] == 1'b1) ? 8'd1 : add_ln30_1_fu_289_p2);

assign select_ln30_fu_225_p3 = ((or_ln30_fu_219_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_k_out_load);

assign tmp_59_cast_fu_264_p3 = {{add_ln712_fu_258_p2}, {3'd0}};

assign tmp_s_fu_250_p3 = {{select_ln30_fu_225_p3}, {3'd0}};

assign xor_ln29_fu_195_p2 = (icmp_ln30_fu_169_p2 ^ 1'd1);

assign zext_ln712_1_fu_278_p1 = add_ln712_2_fu_272_p2;

assign zext_ln712_fu_191_p1 = select_ln29_1_fu_183_p3;

endmodule //LeNet_LeNet_Pipeline_VITIS_LOOP_29_3_VITIS_LOOP_30_4_loop_output_channel_final
