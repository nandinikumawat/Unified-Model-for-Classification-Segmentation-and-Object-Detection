// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LeNet_LeNet_Pipeline_VITIS_LOOP_38_12_VITIS_LOOP_39_13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        image_data_r_V_address0,
        image_data_r_V_ce0,
        image_data_r_V_we0,
        image_data_r_V_d0,
        image_data_address0,
        image_data_ce0,
        image_data_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] image_data_r_V_address0;
output   image_data_r_V_ce0;
output   image_data_r_V_we0;
output  [15:0] image_data_r_V_d0;
output  [9:0] image_data_address0;
output   image_data_ce0;
input  [15:0] image_data_q0;

reg ap_idle;
reg image_data_r_V_ce0;
reg image_data_r_V_we0;
reg image_data_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln38_fu_127_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln39_fu_154_p2;
reg   [0:0] icmp_ln39_reg_320;
wire   [4:0] select_ln38_fu_160_p3;
reg   [4:0] select_ln38_reg_325;
wire   [63:0] index_9_cast_fu_184_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln40_2_fu_272_p1;
reg   [9:0] index_fu_52;
wire   [9:0] add_ln40_fu_189_p2;
wire    ap_loop_init;
reg   [4:0] c_fu_56;
wire   [4:0] add_ln39_fu_195_p2;
reg   [9:0] index_3_fu_60;
wire   [9:0] select_ln38_3_fu_176_p3;
reg   [4:0] r_fu_64;
wire   [4:0] select_ln38_2_fu_230_p3;
reg   [9:0] indvar_flatten76_fu_68;
wire   [9:0] add_ln38_2_fu_133_p2;
wire   [9:0] add_ln38_1_fu_148_p2;
wire   [9:0] select_ln38_1_fu_168_p3;
wire   [4:0] add_ln38_fu_224_p2;
wire   [6:0] tmp_7_fu_245_p3;
wire   [9:0] tmp_6_fu_237_p3;
wire   [9:0] zext_ln40_fu_253_p1;
wire   [9:0] sub_ln40_fu_257_p2;
wire   [9:0] zext_ln40_1_fu_263_p1;
wire   [9:0] add_ln40_1_fu_266_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

LeNet_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            c_fu_56 <= 5'd0;
        end else if (((icmp_ln38_fu_127_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            c_fu_56 <= add_ln39_fu_195_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            index_3_fu_60 <= 10'd0;
        end else if (((icmp_ln38_fu_127_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            index_3_fu_60 <= select_ln38_3_fu_176_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            index_fu_52 <= 10'd0;
        end else if (((icmp_ln38_fu_127_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            index_fu_52 <= add_ln40_fu_189_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten76_fu_68 <= 10'd0;
        end else if (((icmp_ln38_fu_127_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten76_fu_68 <= add_ln38_2_fu_133_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            r_fu_64 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            r_fu_64 <= select_ln38_2_fu_230_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_127_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln39_reg_320 <= icmp_ln39_fu_154_p2;
        select_ln38_reg_325 <= select_ln38_fu_160_p3;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_127_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        image_data_ce0 = 1'b1;
    end else begin
        image_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        image_data_r_V_ce0 = 1'b1;
    end else begin
        image_data_r_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        image_data_r_V_we0 = 1'b1;
    end else begin
        image_data_r_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln38_1_fu_148_p2 = (index_3_fu_60 + 10'd28);

assign add_ln38_2_fu_133_p2 = (indvar_flatten76_fu_68 + 10'd1);

assign add_ln38_fu_224_p2 = (r_fu_64 + 5'd1);

assign add_ln39_fu_195_p2 = (select_ln38_fu_160_p3 + 5'd1);

assign add_ln40_1_fu_266_p2 = (sub_ln40_fu_257_p2 + zext_ln40_1_fu_263_p1);

assign add_ln40_fu_189_p2 = (select_ln38_1_fu_168_p3 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln38_fu_127_p2 = ((indvar_flatten76_fu_68 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_154_p2 = ((c_fu_56 == 5'd28) ? 1'b1 : 1'b0);

assign image_data_address0 = index_9_cast_fu_184_p1;

assign image_data_r_V_address0 = zext_ln40_2_fu_272_p1;

assign image_data_r_V_d0 = image_data_q0;

assign index_9_cast_fu_184_p1 = select_ln38_1_fu_168_p3;

assign select_ln38_1_fu_168_p3 = ((icmp_ln39_fu_154_p2[0:0] == 1'b1) ? add_ln38_1_fu_148_p2 : index_fu_52);

assign select_ln38_2_fu_230_p3 = ((icmp_ln39_reg_320[0:0] == 1'b1) ? add_ln38_fu_224_p2 : r_fu_64);

assign select_ln38_3_fu_176_p3 = ((icmp_ln39_fu_154_p2[0:0] == 1'b1) ? add_ln38_1_fu_148_p2 : index_3_fu_60);

assign select_ln38_fu_160_p3 = ((icmp_ln39_fu_154_p2[0:0] == 1'b1) ? 5'd0 : c_fu_56);

assign sub_ln40_fu_257_p2 = (tmp_6_fu_237_p3 - zext_ln40_fu_253_p1);

assign tmp_6_fu_237_p3 = {{select_ln38_2_fu_230_p3}, {5'd0}};

assign tmp_7_fu_245_p3 = {{select_ln38_2_fu_230_p3}, {2'd0}};

assign zext_ln40_1_fu_263_p1 = select_ln38_reg_325;

assign zext_ln40_2_fu_272_p1 = add_ln40_1_fu_266_p2;

assign zext_ln40_fu_253_p1 = tmp_7_fu_245_p3;

endmodule //LeNet_LeNet_Pipeline_VITIS_LOOP_38_12_VITIS_LOOP_39_13
