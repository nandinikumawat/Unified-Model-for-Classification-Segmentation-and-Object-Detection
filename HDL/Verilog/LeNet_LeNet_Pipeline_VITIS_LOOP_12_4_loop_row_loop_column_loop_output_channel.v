// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LeNet_LeNet_Pipeline_VITIS_LOOP_12_4_loop_row_loop_column_loop_output_channel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer1_output_V_address0,
        layer1_output_V_ce0,
        layer1_output_V_q0,
        layer2_output_V_address0,
        layer2_output_V_ce0,
        layer2_output_V_we0,
        layer2_output_V_d0,
        layer2_output_V_address1,
        layer2_output_V_ce1,
        layer2_output_V_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] layer1_output_V_address0;
output   layer1_output_V_ce0;
input  [15:0] layer1_output_V_q0;
output  [8:0] layer2_output_V_address0;
output   layer2_output_V_ce0;
output   layer2_output_V_we0;
output  [15:0] layer2_output_V_d0;
output  [8:0] layer2_output_V_address1;
output   layer2_output_V_ce1;
input  [15:0] layer2_output_V_q1;

reg ap_idle;
reg layer1_output_V_ce0;
reg layer2_output_V_ce0;
reg layer2_output_V_we0;
reg layer2_output_V_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln12_fu_264_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [8:0] layer2_output_V_addr_1_reg_987;
wire   [63:0] zext_ln1169_18_fu_682_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln736_8_fu_763_p1;
reg   [1:0] k_out_fu_102;
wire   [1:0] add_ln20_2_fu_768_p2;
wire    ap_loop_init;
reg   [3:0] c_fu_106;
wire   [3:0] select_ln18_1_fu_568_p3;
reg   [5:0] indvar_flatten231_fu_110;
wire   [5:0] select_ln18_4_fu_780_p3;
reg   [3:0] r_fu_114;
wire   [3:0] select_ln16_1_fu_484_p3;
reg   [9:0] indvar_flatten259_fu_118;
wire   [9:0] select_ln16_5_fu_794_p3;
reg   [1:0] kc_2_fu_122;
wire   [1:0] select_ln14_2_fu_402_p3;
reg   [10:0] indvar_flatten299_fu_126;
wire   [10:0] select_ln14_6_fu_808_p3;
reg   [1:0] kr_2_fu_130;
wire   [1:0] select_ln12_4_fu_308_p3;
reg   [10:0] indvar_flatten349_fu_134;
wire   [10:0] add_ln12_fu_270_p2;
wire   [4:0] tmp_s_fu_236_p3;
wire   [4:0] zext_ln12_1_fu_228_p1;
wire   [4:0] tmp_11_fu_250_p3;
wire   [4:0] zext_ln14_fu_232_p1;
wire   [0:0] icmp_ln14_fu_294_p2;
wire   [1:0] add_ln12_2_fu_288_p2;
wire   [4:0] zext_ln12_5_fu_320_p1;
wire   [4:0] empty_fu_244_p2;
wire   [4:0] empty_172_fu_258_p2;
wire   [0:0] icmp_ln20_fu_346_p2;
wire   [0:0] xor_ln12_fu_340_p2;
wire   [0:0] icmp_ln18_fu_358_p2;
wire   [0:0] icmp_ln16_fu_370_p2;
wire   [1:0] select_ln12_fu_300_p3;
wire   [0:0] and_ln12_2_fu_376_p2;
wire   [0:0] or_ln14_fu_388_p2;
wire   [1:0] add_ln14_1_fu_382_p2;
wire   [4:0] zext_ln12_fu_316_p1;
wire   [4:0] select_ln12_5_fu_324_p3;
wire   [4:0] zext_ln14_4_fu_422_p1;
wire   [4:0] select_ln12_6_fu_332_p3;
wire   [0:0] xor_ln14_fu_434_p2;
wire   [0:0] and_ln12_fu_352_p2;
wire   [0:0] or_ln14_2_fu_440_p2;
wire   [0:0] and_ln12_1_fu_364_p2;
wire   [3:0] select_ln14_fu_394_p3;
wire   [0:0] and_ln14_1_fu_452_p2;
wire   [0:0] or_ln16_fu_464_p2;
wire   [0:0] or_ln16_2_fu_470_p2;
wire   [3:0] add_ln16_1_fu_458_p2;
wire   [4:0] p_mid_fu_496_p3;
wire   [4:0] p_mid1245_fu_504_p2;
wire   [4:0] select_ln14_4_fu_414_p3;
wire   [4:0] select_ln16_2_fu_510_p3;
wire   [4:0] zext_ln14_3_fu_410_p1;
wire   [4:0] select_ln14_5_fu_426_p3;
wire   [0:0] and_ln14_fu_446_p2;
wire   [0:0] xor_ln16_fu_530_p2;
wire   [3:0] select_ln16_fu_476_p3;
wire   [0:0] and_ln16_fu_536_p2;
wire   [0:0] or_ln18_fu_548_p2;
wire   [0:0] or_ln18_2_fu_554_p2;
wire   [3:0] add_ln18_fu_542_p2;
wire   [4:0] p_mid2_fu_580_p3;
wire   [4:0] p_mid1229_fu_588_p2;
wire   [4:0] select_ln16_4_fu_522_p3;
wire   [4:0] select_ln18_2_fu_594_p3;
wire   [1:0] select_ln18_fu_560_p3;
wire   [6:0] tmp_12_fu_606_p3;
wire   [4:0] tmp_13_fu_618_p3;
wire   [7:0] zext_ln1169_fu_614_p1;
wire   [7:0] zext_ln1169_17_fu_626_p1;
wire   [7:0] sub_ln1169_fu_630_p2;
wire  signed [8:0] sext_ln1169_fu_636_p1;
wire   [8:0] zext_ln16_fu_518_p1;
wire   [8:0] add_ln1169_fu_640_p2;
wire   [5:0] trunc_ln1169_fu_646_p1;
wire   [7:0] trunc_ln1169_1_fu_658_p1;
wire   [10:0] p_shl16_cast_fu_650_p3;
wire   [10:0] p_shl17_cast_fu_662_p3;
wire   [10:0] sub_ln1169_1_fu_670_p2;
wire   [10:0] select_ln18_2_cast_fu_602_p1;
wire   [10:0] add_ln1169_1_fu_676_p2;
wire   [5:0] tmp_14_fu_687_p3;
wire   [3:0] tmp_15_fu_699_p3;
wire   [6:0] zext_ln736_fu_695_p1;
wire   [6:0] zext_ln736_7_fu_707_p1;
wire   [6:0] sub_ln736_fu_711_p2;
wire  signed [7:0] sext_ln736_fu_717_p1;
wire   [7:0] select_ln16_1_cast_fu_492_p1;
wire   [7:0] add_ln736_5_fu_721_p2;
wire   [4:0] trunc_ln736_fu_727_p1;
wire   [6:0] trunc_ln736_1_fu_739_p1;
wire   [8:0] p_shl18_cast_fu_731_p3;
wire   [8:0] p_shl19_cast_fu_743_p3;
wire   [8:0] sub_ln736_1_fu_751_p2;
wire   [8:0] select_ln18_1_cast_fu_576_p1;
wire   [8:0] add_ln736_fu_757_p2;
wire   [5:0] add_ln18_2_fu_774_p2;
wire   [9:0] add_ln16_fu_788_p2;
wire   [10:0] add_ln14_fu_802_p2;
wire   [23:0] r_V_3_fu_861_p3;
wire   [25:0] lhs_1_fu_869_p3;
wire  signed [25:0] sext_ln712_fu_877_p1;
wire   [25:0] ret_V_fu_881_p2;
wire   [0:0] tmp_fu_897_p3;
wire   [15:0] zext_ln415_3_fu_905_p1;
wire   [15:0] trunc_ln717_1_fu_887_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

LeNet_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            c_fu_106 <= 4'd0;
        end else if (((icmp_ln12_fu_264_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            c_fu_106 <= select_ln18_1_fu_568_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten231_fu_110 <= 6'd0;
        end else if (((icmp_ln12_fu_264_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten231_fu_110 <= select_ln18_4_fu_780_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten259_fu_118 <= 10'd0;
        end else if (((icmp_ln12_fu_264_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten259_fu_118 <= select_ln16_5_fu_794_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten299_fu_126 <= 11'd0;
        end else if (((icmp_ln12_fu_264_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten299_fu_126 <= select_ln14_6_fu_808_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten349_fu_134 <= 11'd0;
        end else if (((icmp_ln12_fu_264_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten349_fu_134 <= add_ln12_fu_270_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_out_fu_102 <= 2'd0;
        end else if (((icmp_ln12_fu_264_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k_out_fu_102 <= add_ln20_2_fu_768_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            kc_2_fu_122 <= 2'd0;
        end else if (((icmp_ln12_fu_264_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            kc_2_fu_122 <= select_ln14_2_fu_402_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            kr_2_fu_130 <= 2'd0;
        end else if (((icmp_ln12_fu_264_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            kr_2_fu_130 <= select_ln12_4_fu_308_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            r_fu_114 <= 4'd0;
        end else if (((icmp_ln12_fu_264_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            r_fu_114 <= select_ln16_1_fu_484_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_264_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_output_V_addr_1_reg_987 <= zext_ln736_8_fu_763_p1;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_264_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_output_V_ce0 = 1'b1;
    end else begin
        layer1_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer2_output_V_ce0 = 1'b1;
    end else begin
        layer2_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_output_V_ce1 = 1'b1;
    end else begin
        layer2_output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer2_output_V_we0 = 1'b1;
    end else begin
        layer2_output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1169_1_fu_676_p2 = (sub_ln1169_1_fu_670_p2 + select_ln18_2_cast_fu_602_p1);

assign add_ln1169_fu_640_p2 = ($signed(sext_ln1169_fu_636_p1) + $signed(zext_ln16_fu_518_p1));

assign add_ln12_2_fu_288_p2 = (kr_2_fu_130 + 2'd1);

assign add_ln12_fu_270_p2 = (indvar_flatten349_fu_134 + 11'd1);

assign add_ln14_1_fu_382_p2 = (select_ln12_fu_300_p3 + 2'd1);

assign add_ln14_fu_802_p2 = (indvar_flatten299_fu_126 + 11'd1);

assign add_ln16_1_fu_458_p2 = (select_ln14_fu_394_p3 + 4'd1);

assign add_ln16_fu_788_p2 = (indvar_flatten259_fu_118 + 10'd1);

assign add_ln18_2_fu_774_p2 = (indvar_flatten231_fu_110 + 6'd1);

assign add_ln18_fu_542_p2 = (select_ln16_fu_476_p3 + 4'd1);

assign add_ln20_2_fu_768_p2 = (select_ln18_fu_560_p3 + 2'd1);

assign add_ln736_5_fu_721_p2 = ($signed(sext_ln736_fu_717_p1) + $signed(select_ln16_1_cast_fu_492_p1));

assign add_ln736_fu_757_p2 = (sub_ln736_1_fu_751_p2 + select_ln18_1_cast_fu_576_p1);

assign and_ln12_1_fu_364_p2 = (xor_ln12_fu_340_p2 & icmp_ln18_fu_358_p2);

assign and_ln12_2_fu_376_p2 = (xor_ln12_fu_340_p2 & icmp_ln16_fu_370_p2);

assign and_ln12_fu_352_p2 = (xor_ln12_fu_340_p2 & icmp_ln20_fu_346_p2);

assign and_ln14_1_fu_452_p2 = (or_ln14_2_fu_440_p2 & and_ln12_1_fu_364_p2);

assign and_ln14_fu_446_p2 = (or_ln14_2_fu_440_p2 & and_ln12_fu_352_p2);

assign and_ln16_fu_536_p2 = (xor_ln16_fu_530_p2 & and_ln14_fu_446_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_172_fu_258_p2 = (tmp_11_fu_250_p3 + zext_ln14_fu_232_p1);

assign empty_fu_244_p2 = (tmp_s_fu_236_p3 + zext_ln12_1_fu_228_p1);

assign icmp_ln12_fu_264_p2 = ((indvar_flatten349_fu_134 == 11'd1728) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_294_p2 = ((indvar_flatten299_fu_126 == 11'd864) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_370_p2 = ((indvar_flatten259_fu_118 == 10'd432) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_358_p2 = ((indvar_flatten231_fu_110 == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_346_p2 = ((k_out_fu_102 == 2'd3) ? 1'b1 : 1'b0);

assign layer1_output_V_address0 = zext_ln1169_18_fu_682_p1;

assign layer2_output_V_address0 = layer2_output_V_addr_1_reg_987;

assign layer2_output_V_address1 = zext_ln736_8_fu_763_p1;

assign layer2_output_V_d0 = (zext_ln415_3_fu_905_p1 + trunc_ln717_1_fu_887_p4);

assign lhs_1_fu_869_p3 = {{layer2_output_V_q1}, {10'd0}};

assign or_ln14_2_fu_440_p2 = (xor_ln14_fu_434_p2 | icmp_ln14_fu_294_p2);

assign or_ln14_fu_388_p2 = (icmp_ln14_fu_294_p2 | and_ln12_2_fu_376_p2);

assign or_ln16_2_fu_470_p2 = (or_ln16_fu_464_p2 | icmp_ln14_fu_294_p2);

assign or_ln16_fu_464_p2 = (and_ln14_1_fu_452_p2 | and_ln12_2_fu_376_p2);

assign or_ln18_2_fu_554_p2 = (or_ln18_fu_548_p2 | or_ln14_fu_388_p2);

assign or_ln18_fu_548_p2 = (and_ln16_fu_536_p2 | and_ln14_1_fu_452_p2);

assign p_mid1229_fu_588_p2 = (p_mid2_fu_580_p3 + zext_ln14_3_fu_410_p1);

assign p_mid1245_fu_504_p2 = (p_mid_fu_496_p3 + zext_ln12_fu_316_p1);

assign p_mid2_fu_580_p3 = {{add_ln18_fu_542_p2}, {1'd0}};

assign p_mid_fu_496_p3 = {{add_ln16_1_fu_458_p2}, {1'd0}};

assign p_shl16_cast_fu_650_p3 = {{trunc_ln1169_fu_646_p1}, {5'd0}};

assign p_shl17_cast_fu_662_p3 = {{trunc_ln1169_1_fu_658_p1}, {3'd0}};

assign p_shl18_cast_fu_731_p3 = {{trunc_ln736_fu_727_p1}, {4'd0}};

assign p_shl19_cast_fu_743_p3 = {{trunc_ln736_1_fu_739_p1}, {2'd0}};

assign r_V_3_fu_861_p3 = {{layer1_output_V_q0}, {8'd0}};

assign ret_V_fu_881_p2 = ($signed(lhs_1_fu_869_p3) + $signed(sext_ln712_fu_877_p1));

assign select_ln12_4_fu_308_p3 = ((icmp_ln14_fu_294_p2[0:0] == 1'b1) ? add_ln12_2_fu_288_p2 : kr_2_fu_130);

assign select_ln12_5_fu_324_p3 = ((icmp_ln14_fu_294_p2[0:0] == 1'b1) ? zext_ln12_5_fu_320_p1 : empty_fu_244_p2);

assign select_ln12_6_fu_332_p3 = ((icmp_ln14_fu_294_p2[0:0] == 1'b1) ? 5'd0 : empty_172_fu_258_p2);

assign select_ln12_fu_300_p3 = ((icmp_ln14_fu_294_p2[0:0] == 1'b1) ? 2'd0 : kc_2_fu_122);

assign select_ln14_2_fu_402_p3 = ((and_ln12_2_fu_376_p2[0:0] == 1'b1) ? add_ln14_1_fu_382_p2 : select_ln12_fu_300_p3);

assign select_ln14_4_fu_414_p3 = ((and_ln12_2_fu_376_p2[0:0] == 1'b1) ? zext_ln12_fu_316_p1 : select_ln12_5_fu_324_p3);

assign select_ln14_5_fu_426_p3 = ((and_ln12_2_fu_376_p2[0:0] == 1'b1) ? zext_ln14_4_fu_422_p1 : select_ln12_6_fu_332_p3);

assign select_ln14_6_fu_808_p3 = ((icmp_ln14_fu_294_p2[0:0] == 1'b1) ? 11'd1 : add_ln14_fu_802_p2);

assign select_ln14_fu_394_p3 = ((or_ln14_fu_388_p2[0:0] == 1'b1) ? 4'd0 : r_fu_114);

assign select_ln16_1_cast_fu_492_p1 = select_ln16_1_fu_484_p3;

assign select_ln16_1_fu_484_p3 = ((and_ln14_1_fu_452_p2[0:0] == 1'b1) ? add_ln16_1_fu_458_p2 : select_ln14_fu_394_p3);

assign select_ln16_2_fu_510_p3 = ((and_ln14_1_fu_452_p2[0:0] == 1'b1) ? p_mid1245_fu_504_p2 : select_ln14_4_fu_414_p3);

assign select_ln16_4_fu_522_p3 = ((and_ln14_1_fu_452_p2[0:0] == 1'b1) ? zext_ln14_3_fu_410_p1 : select_ln14_5_fu_426_p3);

assign select_ln16_5_fu_794_p3 = ((or_ln14_fu_388_p2[0:0] == 1'b1) ? 10'd1 : add_ln16_fu_788_p2);

assign select_ln16_fu_476_p3 = ((or_ln16_2_fu_470_p2[0:0] == 1'b1) ? 4'd0 : c_fu_106);

assign select_ln18_1_cast_fu_576_p1 = select_ln18_1_fu_568_p3;

assign select_ln18_1_fu_568_p3 = ((and_ln16_fu_536_p2[0:0] == 1'b1) ? add_ln18_fu_542_p2 : select_ln16_fu_476_p3);

assign select_ln18_2_cast_fu_602_p1 = select_ln18_2_fu_594_p3;

assign select_ln18_2_fu_594_p3 = ((and_ln16_fu_536_p2[0:0] == 1'b1) ? p_mid1229_fu_588_p2 : select_ln16_4_fu_522_p3);

assign select_ln18_4_fu_780_p3 = ((or_ln16_2_fu_470_p2[0:0] == 1'b1) ? 6'd1 : add_ln18_2_fu_774_p2);

assign select_ln18_fu_560_p3 = ((or_ln18_2_fu_554_p2[0:0] == 1'b1) ? 2'd0 : k_out_fu_102);

assign sext_ln1169_fu_636_p1 = $signed(sub_ln1169_fu_630_p2);

assign sext_ln712_fu_877_p1 = $signed(r_V_3_fu_861_p3);

assign sext_ln736_fu_717_p1 = $signed(sub_ln736_fu_711_p2);

assign sub_ln1169_1_fu_670_p2 = (p_shl16_cast_fu_650_p3 - p_shl17_cast_fu_662_p3);

assign sub_ln1169_fu_630_p2 = (zext_ln1169_fu_614_p1 - zext_ln1169_17_fu_626_p1);

assign sub_ln736_1_fu_751_p2 = (p_shl18_cast_fu_731_p3 - p_shl19_cast_fu_743_p3);

assign sub_ln736_fu_711_p2 = (zext_ln736_fu_695_p1 - zext_ln736_7_fu_707_p1);

assign tmp_11_fu_250_p3 = {{c_fu_106}, {1'd0}};

assign tmp_12_fu_606_p3 = {{select_ln18_fu_560_p3}, {5'd0}};

assign tmp_13_fu_618_p3 = {{select_ln18_fu_560_p3}, {3'd0}};

assign tmp_14_fu_687_p3 = {{select_ln18_fu_560_p3}, {4'd0}};

assign tmp_15_fu_699_p3 = {{select_ln18_fu_560_p3}, {2'd0}};

assign tmp_fu_897_p3 = layer1_output_V_q0[32'd1];

assign tmp_s_fu_236_p3 = {{r_fu_114}, {1'd0}};

assign trunc_ln1169_1_fu_658_p1 = add_ln1169_fu_640_p2[7:0];

assign trunc_ln1169_fu_646_p1 = add_ln1169_fu_640_p2[5:0];

assign trunc_ln717_1_fu_887_p4 = {{ret_V_fu_881_p2[25:10]}};

assign trunc_ln736_1_fu_739_p1 = add_ln736_5_fu_721_p2[6:0];

assign trunc_ln736_fu_727_p1 = add_ln736_5_fu_721_p2[4:0];

assign xor_ln12_fu_340_p2 = (icmp_ln14_fu_294_p2 ^ 1'd1);

assign xor_ln14_fu_434_p2 = (icmp_ln16_fu_370_p2 ^ 1'd1);

assign xor_ln16_fu_530_p2 = (1'd1 ^ and_ln14_1_fu_452_p2);

assign zext_ln1169_17_fu_626_p1 = tmp_13_fu_618_p3;

assign zext_ln1169_18_fu_682_p1 = add_ln1169_1_fu_676_p2;

assign zext_ln1169_fu_614_p1 = tmp_12_fu_606_p3;

assign zext_ln12_1_fu_228_p1 = kr_2_fu_130;

assign zext_ln12_5_fu_320_p1 = add_ln12_2_fu_288_p2;

assign zext_ln12_fu_316_p1 = select_ln12_4_fu_308_p3;

assign zext_ln14_3_fu_410_p1 = select_ln14_2_fu_402_p3;

assign zext_ln14_4_fu_422_p1 = add_ln14_1_fu_382_p2;

assign zext_ln14_fu_232_p1 = kc_2_fu_122;

assign zext_ln16_fu_518_p1 = select_ln16_2_fu_510_p3;

assign zext_ln415_3_fu_905_p1 = tmp_fu_897_p3;

assign zext_ln736_7_fu_707_p1 = tmp_15_fu_699_p3;

assign zext_ln736_8_fu_763_p1 = add_ln736_fu_757_p2;

assign zext_ln736_fu_695_p1 = tmp_14_fu_687_p3;

endmodule //LeNet_LeNet_Pipeline_VITIS_LOOP_12_4_loop_row_loop_column_loop_output_channel
