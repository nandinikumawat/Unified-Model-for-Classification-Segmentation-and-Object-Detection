// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LeNet_LeNet_Pipeline_VITIS_LOOP_12_4_loop_row_loop_column_loop_output_channel3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer3_output_V_address0,
        layer3_output_V_ce0,
        layer3_output_V_q0,
        layer4_output_V_address0,
        layer4_output_V_ce0,
        layer4_output_V_we0,
        layer4_output_V_d0,
        layer4_output_V_address1,
        layer4_output_V_ce1,
        layer4_output_V_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] layer3_output_V_address0;
output   layer3_output_V_ce0;
input  [15:0] layer3_output_V_q0;
output  [7:0] layer4_output_V_address0;
output   layer4_output_V_ce0;
output   layer4_output_V_we0;
output  [15:0] layer4_output_V_d0;
output  [7:0] layer4_output_V_address1;
output   layer4_output_V_ce1;
input  [15:0] layer4_output_V_q1;

reg ap_idle;
reg layer3_output_V_ce0;
reg layer4_output_V_ce0;
reg layer4_output_V_we0;
reg layer4_output_V_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln12_fu_246_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] layer4_output_V_addr_reg_843;
wire   [63:0] zext_ln1169_fu_586_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln736_6_fu_619_p1;
reg   [3:0] k_out_fu_88;
wire   [3:0] add_ln20_fu_624_p2;
wire    ap_loop_init;
reg   [2:0] c_fu_92;
wire   [2:0] select_ln18_1_fu_520_p3;
reg   [6:0] indvar_flatten592_fu_96;
wire   [6:0] select_ln18_3_fu_636_p3;
reg   [2:0] r_fu_100;
wire   [2:0] select_ln16_1_fu_450_p3;
reg   [8:0] indvar_flatten618_fu_104;
wire   [8:0] select_ln16_4_fu_650_p3;
reg   [1:0] kc_fu_108;
wire   [1:0] select_ln14_1_fu_376_p3;
reg   [9:0] indvar_flatten654_fu_112;
wire   [9:0] select_ln14_4_fu_664_p3;
reg   [1:0] kr_fu_116;
wire   [1:0] select_ln12_1_fu_290_p3;
reg   [9:0] indvar_flatten700_fu_120;
wire   [9:0] add_ln12_fu_252_p2;
wire   [2:0] empty_fu_222_p2;
wire   [2:0] zext_ln12_2_fu_214_p1;
wire   [2:0] empty_167_fu_234_p2;
wire   [2:0] zext_ln14_fu_218_p1;
wire   [0:0] icmp_ln14_fu_276_p2;
wire   [1:0] add_ln12_3_fu_270_p2;
wire   [2:0] empty_168_fu_240_p2;
wire   [0:0] icmp_ln20_fu_320_p2;
wire   [0:0] xor_ln12_fu_314_p2;
wire   [0:0] icmp_ln18_fu_332_p2;
wire   [0:0] icmp_ln16_fu_344_p2;
wire   [1:0] select_ln12_fu_282_p3;
wire   [0:0] and_ln12_2_fu_350_p2;
wire   [0:0] or_ln14_fu_362_p2;
wire   [1:0] add_ln14_fu_356_p2;
wire   [2:0] zext_ln14_2_fu_388_p1;
wire   [2:0] select_ln12_2_fu_306_p3;
wire   [0:0] xor_ln14_fu_400_p2;
wire   [0:0] and_ln12_fu_326_p2;
wire   [0:0] or_ln14_1_fu_406_p2;
wire   [0:0] and_ln12_1_fu_338_p2;
wire   [2:0] select_ln14_fu_368_p3;
wire   [0:0] and_ln14_1_fu_418_p2;
wire   [0:0] or_ln16_fu_430_p2;
wire   [0:0] or_ln16_1_fu_436_p2;
wire   [2:0] add_ln16_fu_424_p2;
wire   [2:0] empty_170_fu_462_p2;
wire   [2:0] zext_ln12_fu_298_p1;
wire   [2:0] zext_ln14_1_fu_384_p1;
wire   [2:0] select_ln14_2_fu_392_p3;
wire   [0:0] and_ln14_fu_412_p2;
wire   [0:0] xor_ln16_fu_482_p2;
wire   [2:0] select_ln16_fu_442_p3;
wire   [0:0] and_ln16_fu_488_p2;
wire   [0:0] or_ln18_fu_500_p2;
wire   [0:0] or_ln18_1_fu_506_p2;
wire   [2:0] add_ln18_fu_494_p2;
wire   [2:0] empty_171_fu_532_p2;
wire   [2:0] p_mid1590_fu_538_p2;
wire   [2:0] select_ln16_2_fu_474_p3;
wire   [2:0] zext_ln12_4_fu_302_p1;
wire   [2:0] empty_166_fu_228_p2;
wire   [2:0] select_ln12_3_fu_552_p3;
wire   [2:0] p_mid1606_fu_468_p2;
wire   [2:0] select_ln14_3_fu_560_p3;
wire   [3:0] select_ln18_fu_512_p3;
wire   [2:0] select_ln16_3_fu_568_p3;
wire   [2:0] select_ln18_2_fu_544_p3;
wire   [9:0] or_ln1169_2_fu_576_p4;
wire   [5:0] tmp_s_fu_591_p3;
wire   [5:0] zext_ln736_fu_458_p1;
wire   [5:0] add_ln736_fu_599_p2;
wire   [7:0] tmp_75_cast_fu_605_p3;
wire   [7:0] select_ln18_7_cast_fu_528_p1;
wire   [7:0] add_ln736_5_fu_613_p2;
wire   [6:0] add_ln18_1_fu_630_p2;
wire   [8:0] add_ln16_1_fu_644_p2;
wire   [9:0] add_ln14_1_fu_658_p2;
wire   [23:0] r_V_2_fu_717_p3;
wire   [25:0] lhs_1_fu_725_p3;
wire  signed [25:0] sext_ln712_fu_733_p1;
wire   [25:0] ret_V_fu_737_p2;
wire   [0:0] tmp_fu_753_p3;
wire   [15:0] zext_ln415_fu_761_p1;
wire   [15:0] trunc_ln717_4_fu_743_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

LeNet_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            c_fu_92 <= 3'd0;
        end else if (((icmp_ln12_fu_246_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            c_fu_92 <= select_ln18_1_fu_520_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten592_fu_96 <= 7'd0;
        end else if (((icmp_ln12_fu_246_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten592_fu_96 <= select_ln18_3_fu_636_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten618_fu_104 <= 9'd0;
        end else if (((icmp_ln12_fu_246_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten618_fu_104 <= select_ln16_4_fu_650_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten654_fu_112 <= 10'd0;
        end else if (((icmp_ln12_fu_246_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten654_fu_112 <= select_ln14_4_fu_664_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten700_fu_120 <= 10'd0;
        end else if (((icmp_ln12_fu_246_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten700_fu_120 <= add_ln12_fu_252_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_out_fu_88 <= 4'd0;
        end else if (((icmp_ln12_fu_246_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k_out_fu_88 <= add_ln20_fu_624_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            kc_fu_108 <= 2'd0;
        end else if (((icmp_ln12_fu_246_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            kc_fu_108 <= select_ln14_1_fu_376_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            kr_fu_116 <= 2'd0;
        end else if (((icmp_ln12_fu_246_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            kr_fu_116 <= select_ln12_1_fu_290_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            r_fu_100 <= 3'd0;
        end else if (((icmp_ln12_fu_246_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            r_fu_100 <= select_ln16_1_fu_450_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_246_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer4_output_V_addr_reg_843 <= zext_ln736_6_fu_619_p1;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_246_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer3_output_V_ce0 = 1'b1;
    end else begin
        layer3_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer4_output_V_ce0 = 1'b1;
    end else begin
        layer4_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer4_output_V_ce1 = 1'b1;
    end else begin
        layer4_output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer4_output_V_we0 = 1'b1;
    end else begin
        layer4_output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_3_fu_270_p2 = (kr_fu_116 + 2'd1);

assign add_ln12_fu_252_p2 = (indvar_flatten700_fu_120 + 10'd1);

assign add_ln14_1_fu_658_p2 = (indvar_flatten654_fu_112 + 10'd1);

assign add_ln14_fu_356_p2 = (select_ln12_fu_282_p3 + 2'd1);

assign add_ln16_1_fu_644_p2 = (indvar_flatten618_fu_104 + 9'd1);

assign add_ln16_fu_424_p2 = (select_ln14_fu_368_p3 + 3'd1);

assign add_ln18_1_fu_630_p2 = (indvar_flatten592_fu_96 + 7'd1);

assign add_ln18_fu_494_p2 = (select_ln16_fu_442_p3 + 3'd1);

assign add_ln20_fu_624_p2 = (select_ln18_fu_512_p3 + 4'd1);

assign add_ln736_5_fu_613_p2 = (tmp_75_cast_fu_605_p3 + select_ln18_7_cast_fu_528_p1);

assign add_ln736_fu_599_p2 = (tmp_s_fu_591_p3 + zext_ln736_fu_458_p1);

assign and_ln12_1_fu_338_p2 = (xor_ln12_fu_314_p2 & icmp_ln18_fu_332_p2);

assign and_ln12_2_fu_350_p2 = (xor_ln12_fu_314_p2 & icmp_ln16_fu_344_p2);

assign and_ln12_fu_326_p2 = (xor_ln12_fu_314_p2 & icmp_ln20_fu_320_p2);

assign and_ln14_1_fu_418_p2 = (or_ln14_1_fu_406_p2 & and_ln12_1_fu_338_p2);

assign and_ln14_fu_412_p2 = (or_ln14_1_fu_406_p2 & and_ln12_fu_326_p2);

assign and_ln16_fu_488_p2 = (xor_ln16_fu_482_p2 & and_ln14_fu_412_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_166_fu_228_p2 = (empty_fu_222_p2 + zext_ln12_2_fu_214_p1);

assign empty_167_fu_234_p2 = c_fu_92 << 3'd1;

assign empty_168_fu_240_p2 = (empty_167_fu_234_p2 + zext_ln14_fu_218_p1);

assign empty_170_fu_462_p2 = add_ln16_fu_424_p2 << 3'd1;

assign empty_171_fu_532_p2 = add_ln18_fu_494_p2 << 3'd1;

assign empty_fu_222_p2 = r_fu_100 << 3'd1;

assign icmp_ln12_fu_246_p2 = ((indvar_flatten700_fu_120 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_276_p2 = ((indvar_flatten654_fu_112 == 10'd384) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_344_p2 = ((indvar_flatten618_fu_104 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_332_p2 = ((indvar_flatten592_fu_96 == 7'd48) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_320_p2 = ((k_out_fu_88 == 4'd12) ? 1'b1 : 1'b0);

assign layer3_output_V_address0 = zext_ln1169_fu_586_p1;

assign layer4_output_V_address0 = layer4_output_V_addr_reg_843;

assign layer4_output_V_address1 = zext_ln736_6_fu_619_p1;

assign layer4_output_V_d0 = (zext_ln415_fu_761_p1 + trunc_ln717_4_fu_743_p4);

assign lhs_1_fu_725_p3 = {{layer4_output_V_q1}, {10'd0}};

assign or_ln1169_2_fu_576_p4 = {{{select_ln18_fu_512_p3}, {select_ln16_3_fu_568_p3}}, {select_ln18_2_fu_544_p3}};

assign or_ln14_1_fu_406_p2 = (xor_ln14_fu_400_p2 | icmp_ln14_fu_276_p2);

assign or_ln14_fu_362_p2 = (icmp_ln14_fu_276_p2 | and_ln12_2_fu_350_p2);

assign or_ln16_1_fu_436_p2 = (or_ln16_fu_430_p2 | icmp_ln14_fu_276_p2);

assign or_ln16_fu_430_p2 = (and_ln14_1_fu_418_p2 | and_ln12_2_fu_350_p2);

assign or_ln18_1_fu_506_p2 = (or_ln18_fu_500_p2 | or_ln14_fu_362_p2);

assign or_ln18_fu_500_p2 = (and_ln16_fu_488_p2 | and_ln14_1_fu_418_p2);

assign p_mid1590_fu_538_p2 = (empty_171_fu_532_p2 + zext_ln14_1_fu_384_p1);

assign p_mid1606_fu_468_p2 = (empty_170_fu_462_p2 + zext_ln12_fu_298_p1);

assign r_V_2_fu_717_p3 = {{layer3_output_V_q0}, {8'd0}};

assign ret_V_fu_737_p2 = ($signed(lhs_1_fu_725_p3) + $signed(sext_ln712_fu_733_p1));

assign select_ln12_1_fu_290_p3 = ((icmp_ln14_fu_276_p2[0:0] == 1'b1) ? add_ln12_3_fu_270_p2 : kr_fu_116);

assign select_ln12_2_fu_306_p3 = ((icmp_ln14_fu_276_p2[0:0] == 1'b1) ? 3'd0 : empty_168_fu_240_p2);

assign select_ln12_3_fu_552_p3 = ((icmp_ln14_fu_276_p2[0:0] == 1'b1) ? zext_ln12_4_fu_302_p1 : empty_166_fu_228_p2);

assign select_ln12_fu_282_p3 = ((icmp_ln14_fu_276_p2[0:0] == 1'b1) ? 2'd0 : kc_fu_108);

assign select_ln14_1_fu_376_p3 = ((and_ln12_2_fu_350_p2[0:0] == 1'b1) ? add_ln14_fu_356_p2 : select_ln12_fu_282_p3);

assign select_ln14_2_fu_392_p3 = ((and_ln12_2_fu_350_p2[0:0] == 1'b1) ? zext_ln14_2_fu_388_p1 : select_ln12_2_fu_306_p3);

assign select_ln14_3_fu_560_p3 = ((and_ln12_2_fu_350_p2[0:0] == 1'b1) ? zext_ln12_fu_298_p1 : select_ln12_3_fu_552_p3);

assign select_ln14_4_fu_664_p3 = ((icmp_ln14_fu_276_p2[0:0] == 1'b1) ? 10'd1 : add_ln14_1_fu_658_p2);

assign select_ln14_fu_368_p3 = ((or_ln14_fu_362_p2[0:0] == 1'b1) ? 3'd0 : r_fu_100);

assign select_ln16_1_fu_450_p3 = ((and_ln14_1_fu_418_p2[0:0] == 1'b1) ? add_ln16_fu_424_p2 : select_ln14_fu_368_p3);

assign select_ln16_2_fu_474_p3 = ((and_ln14_1_fu_418_p2[0:0] == 1'b1) ? zext_ln14_1_fu_384_p1 : select_ln14_2_fu_392_p3);

assign select_ln16_3_fu_568_p3 = ((and_ln14_1_fu_418_p2[0:0] == 1'b1) ? p_mid1606_fu_468_p2 : select_ln14_3_fu_560_p3);

assign select_ln16_4_fu_650_p3 = ((or_ln14_fu_362_p2[0:0] == 1'b1) ? 9'd1 : add_ln16_1_fu_644_p2);

assign select_ln16_fu_442_p3 = ((or_ln16_1_fu_436_p2[0:0] == 1'b1) ? 3'd0 : c_fu_92);

assign select_ln18_1_fu_520_p3 = ((and_ln16_fu_488_p2[0:0] == 1'b1) ? add_ln18_fu_494_p2 : select_ln16_fu_442_p3);

assign select_ln18_2_fu_544_p3 = ((and_ln16_fu_488_p2[0:0] == 1'b1) ? p_mid1590_fu_538_p2 : select_ln16_2_fu_474_p3);

assign select_ln18_3_fu_636_p3 = ((or_ln16_1_fu_436_p2[0:0] == 1'b1) ? 7'd1 : add_ln18_1_fu_630_p2);

assign select_ln18_7_cast_fu_528_p1 = select_ln18_1_fu_520_p3;

assign select_ln18_fu_512_p3 = ((or_ln18_1_fu_506_p2[0:0] == 1'b1) ? 4'd0 : k_out_fu_88);

assign sext_ln712_fu_733_p1 = $signed(r_V_2_fu_717_p3);

assign tmp_75_cast_fu_605_p3 = {{add_ln736_fu_599_p2}, {2'd0}};

assign tmp_fu_753_p3 = layer3_output_V_q0[32'd1];

assign tmp_s_fu_591_p3 = {{select_ln18_fu_512_p3}, {2'd0}};

assign trunc_ln717_4_fu_743_p4 = {{ret_V_fu_737_p2[25:10]}};

assign xor_ln12_fu_314_p2 = (icmp_ln14_fu_276_p2 ^ 1'd1);

assign xor_ln14_fu_400_p2 = (icmp_ln16_fu_344_p2 ^ 1'd1);

assign xor_ln16_fu_482_p2 = (1'd1 ^ and_ln14_1_fu_418_p2);

assign zext_ln1169_fu_586_p1 = or_ln1169_2_fu_576_p4;

assign zext_ln12_2_fu_214_p1 = kr_fu_116;

assign zext_ln12_4_fu_302_p1 = add_ln12_3_fu_270_p2;

assign zext_ln12_fu_298_p1 = select_ln12_1_fu_290_p3;

assign zext_ln14_1_fu_384_p1 = select_ln14_1_fu_376_p3;

assign zext_ln14_2_fu_388_p1 = add_ln14_fu_356_p2;

assign zext_ln14_fu_218_p1 = kc_fu_108;

assign zext_ln415_fu_761_p1 = tmp_fu_753_p3;

assign zext_ln736_6_fu_619_p1 = add_ln736_5_fu_613_p2;

assign zext_ln736_fu_458_p1 = select_ln16_1_fu_450_p3;

endmodule //LeNet_LeNet_Pipeline_VITIS_LOOP_12_4_loop_row_loop_column_loop_output_channel3
