// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LeNet_LeNet_Pipeline_kernel_row_loop_row_loop_column (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kernel_weight_layer1_V_address0,
        kernel_weight_layer1_V_ce0,
        kernel_weight_layer1_V_q0,
        layer1_output_V_address0,
        layer1_output_V_ce0,
        layer1_output_V_we0,
        layer1_output_V_d0,
        layer1_output_V_q0,
        layer1_output_V_address1,
        layer1_output_V_ce1,
        layer1_output_V_we1,
        layer1_output_V_d1,
        layer1_output_V_q1,
        image_data_r_V_address0,
        image_data_r_V_ce0,
        image_data_r_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] kernel_weight_layer1_V_address0;
output   kernel_weight_layer1_V_ce0;
input  [15:0] kernel_weight_layer1_V_q0;
output  [10:0] layer1_output_V_address0;
output   layer1_output_V_ce0;
output   layer1_output_V_we0;
output  [15:0] layer1_output_V_d0;
input  [15:0] layer1_output_V_q0;
output  [10:0] layer1_output_V_address1;
output   layer1_output_V_ce1;
output   layer1_output_V_we1;
output  [15:0] layer1_output_V_d1;
input  [15:0] layer1_output_V_q1;
output  [9:0] image_data_r_V_address0;
output   image_data_r_V_ce0;
input  [15:0] image_data_r_V_q0;

reg ap_idle;
reg[6:0] kernel_weight_layer1_V_address0;
reg kernel_weight_layer1_V_ce0;
reg[10:0] layer1_output_V_address0;
reg layer1_output_V_ce0;
reg layer1_output_V_we0;
reg[15:0] layer1_output_V_d0;
reg[10:0] layer1_output_V_address1;
reg layer1_output_V_ce1;
reg layer1_output_V_we1;
reg image_data_r_V_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_state9_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln15_reg_1096;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] icmp_ln15_fu_322_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln15_reg_1096_pp0_iter1_reg;
wire   [6:0] select_ln17_3_fu_588_p3;
reg   [6:0] select_ln17_3_reg_1105;
wire   [6:0] select_ln17_4_fu_596_p3;
reg   [6:0] select_ln17_4_reg_1110;
wire   [4:0] select_ln19_fu_648_p3;
reg   [4:0] select_ln19_reg_1115;
wire   [4:0] select_ln19_7_fu_656_p3;
reg   [4:0] select_ln19_7_reg_1120;
wire    ap_block_pp0_stage2_11001;
wire  signed [31:0] r_V_fu_802_p1;
reg  signed [31:0] r_V_reg_1141;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state10_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [10:0] layer1_output_V_addr_reg_1163;
reg   [10:0] layer1_output_V_addr_1_reg_1169;
wire   [10:0] add_ln736_4_fu_883_p2;
reg   [10:0] add_ln736_4_reg_1175;
reg   [10:0] add_ln736_4_reg_1175_pp0_iter2_reg;
reg   [15:0] layer1_output_V_load_1_reg_1180;
wire   [25:0] trunc_ln1245_4_fu_978_p1;
reg   [25:0] trunc_ln1245_4_reg_1185;
reg   [0:0] tmp_20_reg_1190;
reg   [10:0] layer1_output_V_addr_2_reg_1195;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln1171_18_fu_583_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] p_cast6_fu_720_p1;
wire   [63:0] zext_ln1171_19_fu_798_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln1171_20_fu_810_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln736_3_fu_867_p1;
wire   [63:0] zext_ln736_4_fu_878_p1;
wire   [63:0] zext_ln736_5_fu_988_p1;
reg   [4:0] c_fu_94;
wire   [4:0] add_ln21_fu_725_p2;
wire    ap_loop_init;
reg   [4:0] r_fu_98;
reg   [9:0] indvar_flatten106_fu_102;
wire   [9:0] select_ln19_9_fu_737_p3;
reg   [2:0] kc_1_fu_106;
wire   [2:0] select_ln17_1_fu_563_p3;
reg   [12:0] indvar_flatten127_fu_110;
wire   [12:0] select_ln17_7_fu_751_p3;
reg   [2:0] kr_1_fu_114;
wire   [2:0] select_ln15_2_fu_409_p3;
reg   [13:0] indvar_flatten175_fu_118;
wire   [13:0] add_ln15_fu_328_p2;
wire   [15:0] add_ln415_fu_927_p2;
wire   [15:0] add_ln415_3_fu_1018_p2;
wire   [4:0] tmp_s_fu_248_p3;
wire   [5:0] zext_ln1171_5_fu_256_p1;
wire   [5:0] zext_ln1171_fu_244_p1;
wire   [5:0] add_ln1171_fu_260_p2;
wire   [5:0] add_ln1171_1_fu_270_p2;
wire   [6:0] zext_ln1171_6_fu_266_p1;
wire   [5:0] zext_ln1171_9_fu_294_p1;
wire   [6:0] zext_ln1171_7_fu_276_p1;
wire   [6:0] zext_ln1171_8_fu_290_p1;
wire   [6:0] add_ln1171_2_fu_280_p2;
wire   [4:0] zext_ln15_1_fu_286_p1;
wire   [0:0] icmp_ln17_fu_349_p2;
wire   [2:0] add_ln15_1_fu_343_p2;
wire   [4:0] tmp_8_fu_371_p3;
wire   [5:0] zext_ln1171_12_fu_379_p1;
wire   [5:0] zext_ln1171_11_fu_367_p1;
wire   [5:0] add_ln1171_6_fu_383_p2;
wire   [5:0] add_ln1171_7_fu_393_p2;
wire   [6:0] zext_ln1171_13_fu_389_p1;
wire   [4:0] tmp_fu_421_p3;
wire   [6:0] zext_ln1171_16_fu_429_p1;
wire   [6:0] zext_ln1171_15_fu_417_p1;
wire   [6:0] add_ln1171_9_fu_433_p2;
wire   [5:0] add_ln1171_3_fu_298_p2;
wire   [5:0] select_ln15_5_fu_455_p3;
wire   [6:0] zext_ln1171_14_fu_399_p1;
wire   [6:0] add_ln1171_4_fu_304_p2;
wire   [6:0] add_ln1171_8_fu_403_p2;
wire   [6:0] add_ln1171_5_fu_310_p2;
wire   [4:0] zext_ln1171_10_fu_363_p1;
wire   [4:0] empty_fu_316_p2;
wire   [0:0] icmp_ln21_fu_497_p2;
wire   [0:0] xor_ln15_fu_491_p2;
wire   [0:0] icmp_ln19_fu_509_p2;
wire   [2:0] select_ln15_fu_355_p3;
wire   [0:0] and_ln15_1_fu_515_p2;
wire   [0:0] or_ln17_fu_527_p2;
wire   [2:0] add_ln17_fu_521_p2;
wire   [6:0] zext_ln1171_17_fu_541_p1;
wire   [6:0] add_ln1171_10_fu_439_p2;
wire   [6:0] add_ln1171_11_fu_445_p2;
wire   [6:0] add_ln1171_12_fu_545_p2;
wire   [6:0] zext_ln15_fu_463_p1;
wire   [6:0] select_ln17_2_fu_575_p3;
wire   [6:0] add_ln1171_13_fu_551_p2;
wire   [6:0] select_ln15_6_fu_467_p3;
wire   [6:0] add_ln1171_14_fu_557_p2;
wire   [6:0] select_ln15_7_fu_475_p3;
wire   [4:0] zext_ln17_fu_451_p1;
wire   [4:0] select_ln15_8_fu_483_p3;
wire   [0:0] xor_ln17_fu_612_p2;
wire   [0:0] and_ln15_fu_503_p2;
wire   [0:0] or_ln17_2_fu_618_p2;
wire   [4:0] select_ln17_fu_533_p3;
wire   [0:0] and_ln17_fu_624_p2;
wire   [0:0] or_ln19_fu_636_p2;
wire   [0:0] or_ln19_2_fu_642_p2;
wire   [4:0] add_ln19_fu_630_p2;
wire   [4:0] p_mid1_fu_664_p2;
wire   [4:0] select_ln17_6_fu_604_p3;
wire   [4:0] select_ln19_8_fu_670_p3;
wire   [6:0] tmp_17_fu_686_p3;
wire   [9:0] p_shl9_cast_fu_678_p3;
wire   [9:0] p_shl10_cast_fu_694_p1;
wire   [4:0] zext_ln17_4_fu_571_p1;
wire   [4:0] empty_162_fu_704_p2;
wire   [9:0] empty_161_fu_698_p2;
wire   [9:0] p_cast_fu_710_p1;
wire   [9:0] empty_163_fu_714_p2;
wire   [9:0] add_ln19_2_fu_731_p2;
wire   [12:0] add_ln17_2_fu_745_p2;
wire   [9:0] tmp_15_fu_818_p3;
wire   [7:0] tmp_16_fu_829_p3;
wire   [10:0] zext_ln736_fu_825_p1;
wire   [10:0] zext_ln736_1_fu_836_p1;
wire   [10:0] sub_ln736_fu_840_p2;
wire   [10:0] zext_ln736_2_fu_858_p1;
wire   [10:0] add_ln736_2_fu_861_p2;
wire   [10:0] add_ln736_fu_846_p2;
wire   [10:0] add_ln736_3_fu_872_p2;
wire   [10:0] add_ln736_1_fu_852_p2;
wire  signed [31:0] grp_fu_1025_p2;
wire   [25:0] shl_ln_fu_889_p3;
wire   [25:0] trunc_ln1245_fu_897_p1;
wire   [25:0] add_ln1245_fu_900_p2;
wire   [0:0] tmp_18_fu_916_p3;
wire   [15:0] zext_ln415_fu_923_p1;
wire   [15:0] trunc_ln8_fu_906_p4;
wire  signed [31:0] grp_fu_1033_p2;
wire   [25:0] shl_ln737_1_fu_934_p3;
wire   [25:0] trunc_ln1245_3_fu_941_p1;
wire   [25:0] add_ln1245_1_fu_944_p2;
wire   [0:0] tmp_19_fu_960_p3;
wire   [15:0] zext_ln415_1_fu_967_p1;
wire   [15:0] trunc_ln717_2_fu_950_p4;
wire  signed [31:0] grp_fu_1040_p2;
wire   [25:0] shl_ln737_2_fu_992_p3;
wire   [25:0] add_ln1245_2_fu_1000_p2;
wire   [15:0] zext_ln415_2_fu_1015_p1;
wire   [15:0] trunc_ln717_3_fu_1005_p4;
wire  signed [15:0] grp_fu_1033_p1;
wire  signed [15:0] grp_fu_1040_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage0;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

LeNet_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_weight_layer1_V_q0),
    .din1(image_data_r_V_q0),
    .ce(1'b1),
    .dout(grp_fu_1025_p2)
);

LeNet_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_weight_layer1_V_q0),
    .din1(grp_fu_1033_p1),
    .ce(1'b1),
    .dout(grp_fu_1033_p2)
);

LeNet_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_weight_layer1_V_q0),
    .din1(grp_fu_1040_p1),
    .ce(1'b1),
    .dout(grp_fu_1040_p2)
);

LeNet_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_fu_94 <= 5'd0;
    end else if (((icmp_ln15_fu_322_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_fu_94 <= add_ln21_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten106_fu_102 <= 10'd0;
    end else if (((icmp_ln15_fu_322_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten106_fu_102 <= select_ln19_9_fu_737_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten127_fu_110 <= 13'd0;
    end else if (((icmp_ln15_fu_322_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten127_fu_110 <= select_ln17_7_fu_751_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten175_fu_118 <= 14'd0;
    end else if (((icmp_ln15_fu_322_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten175_fu_118 <= add_ln15_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kc_1_fu_106 <= 3'd0;
    end else if (((icmp_ln15_fu_322_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kc_1_fu_106 <= select_ln17_1_fu_563_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kr_1_fu_114 <= 3'd0;
    end else if (((icmp_ln15_fu_322_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kr_1_fu_114 <= select_ln15_2_fu_409_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_fu_98 <= 5'd0;
    end else if (((icmp_ln15_fu_322_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        r_fu_98 <= select_ln19_7_fu_656_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln736_4_reg_1175 <= add_ln736_4_fu_883_p2;
        add_ln736_4_reg_1175_pp0_iter2_reg <= add_ln736_4_reg_1175;
        icmp_ln15_reg_1096 <= icmp_ln15_fu_322_p2;
        icmp_ln15_reg_1096_pp0_iter1_reg <= icmp_ln15_reg_1096;
        layer1_output_V_addr_1_reg_1169 <= zext_ln736_4_fu_878_p1;
        layer1_output_V_addr_reg_1163 <= zext_ln736_3_fu_867_p1;
        tmp_20_reg_1190 <= grp_fu_1040_p2[32'd9];
        trunc_ln1245_4_reg_1185 <= trunc_ln1245_4_fu_978_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        layer1_output_V_addr_2_reg_1195 <= zext_ln736_5_fu_988_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        layer1_output_V_load_1_reg_1180 <= layer1_output_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1096 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        r_V_reg_1141 <= r_V_fu_802_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_322_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln17_3_reg_1105 <= select_ln17_3_fu_588_p3;
        select_ln17_4_reg_1110 <= select_ln17_4_fu_596_p3;
        select_ln19_7_reg_1120 <= select_ln19_7_fu_656_p3;
        select_ln19_reg_1115 <= select_ln19_fu_648_p3;
    end
end

always @ (*) begin
    if (((icmp_ln15_reg_1096 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln15_reg_1096_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        image_data_r_V_ce0 = 1'b1;
    end else begin
        image_data_r_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_weight_layer1_V_address0 = zext_ln1171_20_fu_810_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        kernel_weight_layer1_V_address0 = zext_ln1171_19_fu_798_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        kernel_weight_layer1_V_address0 = zext_ln1171_18_fu_583_p1;
    end else begin
        kernel_weight_layer1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        kernel_weight_layer1_V_ce0 = 1'b1;
    end else begin
        kernel_weight_layer1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_output_V_address0 = layer1_output_V_addr_2_reg_1195;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        layer1_output_V_address0 = layer1_output_V_addr_reg_1163;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_output_V_address0 = zext_ln736_4_fu_878_p1;
    end else begin
        layer1_output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        layer1_output_V_address1 = zext_ln736_5_fu_988_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_output_V_address1 = layer1_output_V_addr_1_reg_1169;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_output_V_address1 = zext_ln736_3_fu_867_p1;
    end else begin
        layer1_output_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        layer1_output_V_ce0 = 1'b1;
    end else begin
        layer1_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        layer1_output_V_ce1 = 1'b1;
    end else begin
        layer1_output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_output_V_d0 = add_ln415_3_fu_1018_p2;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        layer1_output_V_d0 = add_ln415_fu_927_p2;
    end else begin
        layer1_output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        layer1_output_V_we0 = 1'b1;
    end else begin
        layer1_output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_output_V_we1 = 1'b1;
    end else begin
        layer1_output_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1171_10_fu_439_p2 = (add_ln1171_9_fu_433_p2 + 7'd25);

assign add_ln1171_11_fu_445_p2 = (add_ln1171_9_fu_433_p2 + 7'd50);

assign add_ln1171_12_fu_545_p2 = (add_ln1171_9_fu_433_p2 + zext_ln1171_17_fu_541_p1);

assign add_ln1171_13_fu_551_p2 = (add_ln1171_10_fu_439_p2 + zext_ln1171_17_fu_541_p1);

assign add_ln1171_14_fu_557_p2 = (add_ln1171_11_fu_445_p2 + zext_ln1171_17_fu_541_p1);

assign add_ln1171_1_fu_270_p2 = (add_ln1171_fu_260_p2 + 6'd25);

assign add_ln1171_2_fu_280_p2 = (zext_ln1171_6_fu_266_p1 + 7'd50);

assign add_ln1171_3_fu_298_p2 = (add_ln1171_fu_260_p2 + zext_ln1171_9_fu_294_p1);

assign add_ln1171_4_fu_304_p2 = (zext_ln1171_7_fu_276_p1 + zext_ln1171_8_fu_290_p1);

assign add_ln1171_5_fu_310_p2 = (add_ln1171_2_fu_280_p2 + zext_ln1171_8_fu_290_p1);

assign add_ln1171_6_fu_383_p2 = (zext_ln1171_12_fu_379_p1 + zext_ln1171_11_fu_367_p1);

assign add_ln1171_7_fu_393_p2 = (add_ln1171_6_fu_383_p2 + 6'd25);

assign add_ln1171_8_fu_403_p2 = (zext_ln1171_13_fu_389_p1 + 7'd50);

assign add_ln1171_9_fu_433_p2 = (zext_ln1171_16_fu_429_p1 + zext_ln1171_15_fu_417_p1);

assign add_ln1171_fu_260_p2 = (zext_ln1171_5_fu_256_p1 + zext_ln1171_fu_244_p1);

assign add_ln1245_1_fu_944_p2 = (shl_ln737_1_fu_934_p3 + trunc_ln1245_3_fu_941_p1);

assign add_ln1245_2_fu_1000_p2 = (shl_ln737_2_fu_992_p3 + trunc_ln1245_4_reg_1185);

assign add_ln1245_fu_900_p2 = (shl_ln_fu_889_p3 + trunc_ln1245_fu_897_p1);

assign add_ln15_1_fu_343_p2 = (kr_1_fu_114 + 3'd1);

assign add_ln15_fu_328_p2 = (indvar_flatten175_fu_118 + 14'd1);

assign add_ln17_2_fu_745_p2 = (indvar_flatten127_fu_110 + 13'd1);

assign add_ln17_fu_521_p2 = (select_ln15_fu_355_p3 + 3'd1);

assign add_ln19_2_fu_731_p2 = (indvar_flatten106_fu_102 + 10'd1);

assign add_ln19_fu_630_p2 = (select_ln17_fu_533_p3 + 5'd1);

assign add_ln21_fu_725_p2 = (select_ln19_fu_648_p3 + 5'd1);

assign add_ln415_3_fu_1018_p2 = (zext_ln415_2_fu_1015_p1 + trunc_ln717_3_fu_1005_p4);

assign add_ln415_fu_927_p2 = (zext_ln415_fu_923_p1 + trunc_ln8_fu_906_p4);

assign add_ln736_1_fu_852_p2 = ($signed(sub_ln736_fu_840_p2) + $signed(11'd1152));

assign add_ln736_2_fu_861_p2 = (sub_ln736_fu_840_p2 + zext_ln736_2_fu_858_p1);

assign add_ln736_3_fu_872_p2 = (add_ln736_fu_846_p2 + zext_ln736_2_fu_858_p1);

assign add_ln736_4_fu_883_p2 = (add_ln736_1_fu_852_p2 + zext_ln736_2_fu_858_p1);

assign add_ln736_fu_846_p2 = (sub_ln736_fu_840_p2 + 11'd576);

assign and_ln15_1_fu_515_p2 = (xor_ln15_fu_491_p2 & icmp_ln19_fu_509_p2);

assign and_ln15_fu_503_p2 = (xor_ln15_fu_491_p2 & icmp_ln21_fu_497_p2);

assign and_ln17_fu_624_p2 = (or_ln17_2_fu_618_p2 & and_ln15_fu_503_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign empty_161_fu_698_p2 = (p_shl9_cast_fu_678_p3 - p_shl10_cast_fu_694_p1);

assign empty_162_fu_704_p2 = (select_ln19_fu_648_p3 + zext_ln17_4_fu_571_p1);

assign empty_163_fu_714_p2 = (empty_161_fu_698_p2 + p_cast_fu_710_p1);

assign empty_fu_316_p2 = (r_fu_98 + zext_ln15_1_fu_286_p1);

assign grp_fu_1033_p1 = r_V_reg_1141;

assign grp_fu_1040_p1 = r_V_reg_1141;

assign icmp_ln15_fu_322_p2 = ((indvar_flatten175_fu_118 == 14'd14400) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_349_p2 = ((indvar_flatten127_fu_110 == 13'd2880) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_509_p2 = ((indvar_flatten106_fu_102 == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_497_p2 = ((c_fu_94 == 5'd24) ? 1'b1 : 1'b0);

assign image_data_r_V_address0 = p_cast6_fu_720_p1;

assign layer1_output_V_d1 = (zext_ln415_1_fu_967_p1 + trunc_ln717_2_fu_950_p4);

assign or_ln17_2_fu_618_p2 = (xor_ln17_fu_612_p2 | icmp_ln17_fu_349_p2);

assign or_ln17_fu_527_p2 = (icmp_ln17_fu_349_p2 | and_ln15_1_fu_515_p2);

assign or_ln19_2_fu_642_p2 = (or_ln19_fu_636_p2 | icmp_ln17_fu_349_p2);

assign or_ln19_fu_636_p2 = (and_ln17_fu_624_p2 | and_ln15_1_fu_515_p2);

assign p_cast6_fu_720_p1 = empty_163_fu_714_p2;

assign p_cast_fu_710_p1 = empty_162_fu_704_p2;

assign p_mid1_fu_664_p2 = (add_ln19_fu_630_p2 + zext_ln17_fu_451_p1);

assign p_shl10_cast_fu_694_p1 = tmp_17_fu_686_p3;

assign p_shl9_cast_fu_678_p3 = {{select_ln19_8_fu_670_p3}, {5'd0}};

assign r_V_fu_802_p1 = $signed(image_data_r_V_q0);

assign select_ln15_2_fu_409_p3 = ((icmp_ln17_fu_349_p2[0:0] == 1'b1) ? add_ln15_1_fu_343_p2 : kr_1_fu_114);

assign select_ln15_5_fu_455_p3 = ((icmp_ln17_fu_349_p2[0:0] == 1'b1) ? add_ln1171_6_fu_383_p2 : add_ln1171_3_fu_298_p2);

assign select_ln15_6_fu_467_p3 = ((icmp_ln17_fu_349_p2[0:0] == 1'b1) ? zext_ln1171_14_fu_399_p1 : add_ln1171_4_fu_304_p2);

assign select_ln15_7_fu_475_p3 = ((icmp_ln17_fu_349_p2[0:0] == 1'b1) ? add_ln1171_8_fu_403_p2 : add_ln1171_5_fu_310_p2);

assign select_ln15_8_fu_483_p3 = ((icmp_ln17_fu_349_p2[0:0] == 1'b1) ? zext_ln1171_10_fu_363_p1 : empty_fu_316_p2);

assign select_ln15_fu_355_p3 = ((icmp_ln17_fu_349_p2[0:0] == 1'b1) ? 3'd0 : kc_1_fu_106);

assign select_ln17_1_fu_563_p3 = ((and_ln15_1_fu_515_p2[0:0] == 1'b1) ? add_ln17_fu_521_p2 : select_ln15_fu_355_p3);

assign select_ln17_2_fu_575_p3 = ((and_ln15_1_fu_515_p2[0:0] == 1'b1) ? add_ln1171_12_fu_545_p2 : zext_ln15_fu_463_p1);

assign select_ln17_3_fu_588_p3 = ((and_ln15_1_fu_515_p2[0:0] == 1'b1) ? add_ln1171_13_fu_551_p2 : select_ln15_6_fu_467_p3);

assign select_ln17_4_fu_596_p3 = ((and_ln15_1_fu_515_p2[0:0] == 1'b1) ? add_ln1171_14_fu_557_p2 : select_ln15_7_fu_475_p3);

assign select_ln17_6_fu_604_p3 = ((and_ln15_1_fu_515_p2[0:0] == 1'b1) ? zext_ln17_fu_451_p1 : select_ln15_8_fu_483_p3);

assign select_ln17_7_fu_751_p3 = ((icmp_ln17_fu_349_p2[0:0] == 1'b1) ? 13'd1 : add_ln17_2_fu_745_p2);

assign select_ln17_fu_533_p3 = ((or_ln17_fu_527_p2[0:0] == 1'b1) ? 5'd0 : r_fu_98);

assign select_ln19_7_fu_656_p3 = ((and_ln17_fu_624_p2[0:0] == 1'b1) ? add_ln19_fu_630_p2 : select_ln17_fu_533_p3);

assign select_ln19_8_fu_670_p3 = ((and_ln17_fu_624_p2[0:0] == 1'b1) ? p_mid1_fu_664_p2 : select_ln17_6_fu_604_p3);

assign select_ln19_9_fu_737_p3 = ((or_ln17_fu_527_p2[0:0] == 1'b1) ? 10'd1 : add_ln19_2_fu_731_p2);

assign select_ln19_fu_648_p3 = ((or_ln19_2_fu_642_p2[0:0] == 1'b1) ? 5'd0 : c_fu_94);

assign shl_ln737_1_fu_934_p3 = {{layer1_output_V_load_1_reg_1180}, {10'd0}};

assign shl_ln737_2_fu_992_p3 = {{layer1_output_V_q1}, {10'd0}};

assign shl_ln_fu_889_p3 = {{layer1_output_V_q1}, {10'd0}};

assign sub_ln736_fu_840_p2 = (zext_ln736_fu_825_p1 - zext_ln736_1_fu_836_p1);

assign tmp_15_fu_818_p3 = {{select_ln19_7_reg_1120}, {5'd0}};

assign tmp_16_fu_829_p3 = {{select_ln19_7_reg_1120}, {3'd0}};

assign tmp_17_fu_686_p3 = {{select_ln19_8_fu_670_p3}, {2'd0}};

assign tmp_18_fu_916_p3 = grp_fu_1025_p2[32'd9];

assign tmp_19_fu_960_p3 = grp_fu_1033_p2[32'd9];

assign tmp_8_fu_371_p3 = {{add_ln15_1_fu_343_p2}, {2'd0}};

assign tmp_fu_421_p3 = {{select_ln15_2_fu_409_p3}, {2'd0}};

assign tmp_s_fu_248_p3 = {{kr_1_fu_114}, {2'd0}};

assign trunc_ln1245_3_fu_941_p1 = grp_fu_1033_p2[25:0];

assign trunc_ln1245_4_fu_978_p1 = grp_fu_1040_p2[25:0];

assign trunc_ln1245_fu_897_p1 = grp_fu_1025_p2[25:0];

assign trunc_ln717_2_fu_950_p4 = {{add_ln1245_1_fu_944_p2[25:10]}};

assign trunc_ln717_3_fu_1005_p4 = {{add_ln1245_2_fu_1000_p2[25:10]}};

assign trunc_ln8_fu_906_p4 = {{add_ln1245_fu_900_p2[25:10]}};

assign xor_ln15_fu_491_p2 = (icmp_ln17_fu_349_p2 ^ 1'd1);

assign xor_ln17_fu_612_p2 = (icmp_ln19_fu_509_p2 ^ 1'd1);

assign zext_ln1171_10_fu_363_p1 = add_ln15_1_fu_343_p2;

assign zext_ln1171_11_fu_367_p1 = add_ln15_1_fu_343_p2;

assign zext_ln1171_12_fu_379_p1 = tmp_8_fu_371_p3;

assign zext_ln1171_13_fu_389_p1 = add_ln1171_6_fu_383_p2;

assign zext_ln1171_14_fu_399_p1 = add_ln1171_7_fu_393_p2;

assign zext_ln1171_15_fu_417_p1 = select_ln15_2_fu_409_p3;

assign zext_ln1171_16_fu_429_p1 = tmp_fu_421_p3;

assign zext_ln1171_17_fu_541_p1 = add_ln17_fu_521_p2;

assign zext_ln1171_18_fu_583_p1 = select_ln17_2_fu_575_p3;

assign zext_ln1171_19_fu_798_p1 = select_ln17_3_reg_1105;

assign zext_ln1171_20_fu_810_p1 = select_ln17_4_reg_1110;

assign zext_ln1171_5_fu_256_p1 = tmp_s_fu_248_p3;

assign zext_ln1171_6_fu_266_p1 = add_ln1171_fu_260_p2;

assign zext_ln1171_7_fu_276_p1 = add_ln1171_1_fu_270_p2;

assign zext_ln1171_8_fu_290_p1 = kc_1_fu_106;

assign zext_ln1171_9_fu_294_p1 = kc_1_fu_106;

assign zext_ln1171_fu_244_p1 = kr_1_fu_114;

assign zext_ln15_1_fu_286_p1 = kr_1_fu_114;

assign zext_ln15_fu_463_p1 = select_ln15_5_fu_455_p3;

assign zext_ln17_4_fu_571_p1 = select_ln17_1_fu_563_p3;

assign zext_ln17_fu_451_p1 = select_ln15_2_fu_409_p3;

assign zext_ln415_1_fu_967_p1 = tmp_19_fu_960_p3;

assign zext_ln415_2_fu_1015_p1 = tmp_20_reg_1190;

assign zext_ln415_fu_923_p1 = tmp_18_fu_916_p3;

assign zext_ln736_1_fu_836_p1 = tmp_16_fu_829_p3;

assign zext_ln736_2_fu_858_p1 = select_ln19_reg_1115;

assign zext_ln736_3_fu_867_p1 = add_ln736_2_fu_861_p2;

assign zext_ln736_4_fu_878_p1 = add_ln736_3_fu_872_p2;

assign zext_ln736_5_fu_988_p1 = add_ln736_4_reg_1175_pp0_iter2_reg;

assign zext_ln736_fu_825_p1 = tmp_15_fu_818_p3;

endmodule //LeNet_LeNet_Pipeline_kernel_row_loop_row_loop_column
